local MinimalGUI = {}
local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')

local Config = {
	Colors = {
		Background = Color3.fromRGB(250, 250, 252),
		Surface = Color3.fromRGB(255, 255, 255),
		Surface2 = Color3.fromRGB(248, 249, 251),
		Surface3 = Color3.fromRGB(241, 245, 249),
		Primary = Color3.fromRGB(79, 70, 229),
		PrimaryHover = Color3.fromRGB(99, 102, 241),
		PrimaryDim = Color3.fromRGB(67, 56, 202),
		Text = Color3.fromRGB(15, 23, 42),
		TextSecondary = Color3.fromRGB(71, 85, 105),
		TextMuted = Color3.fromRGB(148, 163, 184),
		Success = Color3.fromRGB(34, 197, 94),
		Danger = Color3.fromRGB(239, 68, 68),
		Warning = Color3.fromRGB(251, 146, 60),
		Border = Color3.fromRGB(226, 232, 240),
		BorderLight = Color3.fromRGB(203, 213, 225),
		Accent = Color3.fromRGB(147, 51, 234)
	},
	Fonts = {
		Regular = Enum.Font.Gotham,
		Medium = Enum.Font.GothamMedium,
		Bold = Enum.Font.GothamBold,
	},
	Spacing = { xs = 4, sm = 8, md = 12, lg = 16, xl = 24 },
	Radius = { sm = 4, md = 6, lg = 8, xl = 12 },
	Animation = { Fast = 0.12, Medium = 0.2, Slow = 0.3 },
	Layout = {
		RowHeight = 48,
		RowSpacing = 12,
		EdgePadding = 20,
		MaxWidth = 720,
		MaxHeight = 480
	}
}

local function Tween(object, properties, duration, style)
	return TweenService:Create(object, 
		TweenInfo.new(duration or Config.Animation.Medium, style or Enum.EasingStyle.Quint, Enum.EasingDirection.Out), 
		properties)
end

local function Corner(parent, radius)
	local corner = Instance.new('UICorner')
	corner.CornerRadius = UDim.new(0, radius or Config.Radius.lg)
	corner.Parent = parent
	return corner
end

local function Stroke(parent, color, thickness)
	local stroke = Instance.new('UIStroke')
	stroke.Color = color or Config.Colors.Border
	stroke.Thickness = thickness or 1
	stroke.Transparency = 0
	stroke.Parent = parent
	return stroke
end

function MinimalGUI:CreateWindow(title, size)
	title = title or 'MinimalGUI'
	size = size or UDim2.new(0, Config.Layout.MaxWidth, 0, Config.Layout.MaxHeight)

	local window = { Pages = {}, CurrentPage = nil, _connections = {} }

	local gui = Instance.new('ScreenGui')
	gui.Name = 'MinimalGUI'
	gui.Parent = CoreGui
	gui.ResetOnSpawn = false
	gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local main = Instance.new('Frame')
	main.Size = size
	main.Position = UDim2.new(0.5, 0, 0.5, 0)
	main.AnchorPoint = Vector2.new(0.5, 0.5)
	main.BackgroundColor3 = Config.Colors.Background
	main.BorderSizePixel = 0
	main.Parent = gui
	Corner(main, Config.Radius.xl)
	Stroke(main, Config.Colors.Border, 1.5)

	local header = Instance.new('Frame')
	header.Size = UDim2.new(1, 0, 0, 56)
	header.BackgroundColor3 = Config.Colors.Surface
	header.BorderSizePixel = 0
	header.Parent = main
	Corner(header, Config.Radius.xl)

	local headerSeparator = Instance.new('Frame')
	headerSeparator.Size = UDim2.new(1, -40, 0, 1)
	headerSeparator.Position = UDim2.new(0, 20, 1, -1)
	headerSeparator.BackgroundColor3 = Config.Colors.Border
	headerSeparator.BorderSizePixel = 0
	headerSeparator.Parent = header

	local titleText = Instance.new('TextLabel')
	titleText.Size = UDim2.new(0, 200, 0, 20)
	titleText.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 18)
	titleText.BackgroundTransparency = 1
	titleText.Text = title
	titleText.TextColor3 = Config.Colors.Text
	titleText.TextSize = 15
	titleText.Font = Config.Fonts.Bold
	titleText.TextXAlignment = Enum.TextXAlignment.Left
	titleText.Parent = header

	local closeBtn = Instance.new('TextButton')
	closeBtn.Size = UDim2.new(0, 28, 0, 28)
	closeBtn.Position = UDim2.new(1, -Config.Layout.EdgePadding - 28, 0, 14)
	closeBtn.BackgroundColor3 = Config.Colors.Surface2
	closeBtn.BorderSizePixel = 0
	closeBtn.Text = 'Ã—'
	closeBtn.TextColor3 = Config.Colors.TextMuted
	closeBtn.TextSize = 16
	closeBtn.Font = Config.Fonts.Medium
	closeBtn.Parent = header
	Corner(closeBtn, Config.Radius.sm)

	closeBtn.MouseEnter:Connect(function()
		Tween(closeBtn, { 
			BackgroundColor3 = Config.Colors.Danger, 
			TextColor3 = Config.Colors.Surface
		}, Config.Animation.Fast):Play()
	end)
	closeBtn.MouseLeave:Connect(function()
		Tween(closeBtn, { 
			BackgroundColor3 = Config.Colors.Surface2, 
			TextColor3 = Config.Colors.TextMuted
		}, Config.Animation.Fast):Play()
	end)
	closeBtn.MouseButton1Click:Connect(function()
		Tween(main, { Size = UDim2.new(0, 0, 0, 0) }, Config.Animation.Medium, Enum.EasingStyle.Quint):Play()
		task.wait(Config.Animation.Medium)
		gui:Destroy()
	end)

	local tabContainer = Instance.new('Frame')
	tabContainer.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 0, 32)
	tabContainer.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 68)
	tabContainer.BackgroundTransparency = 1
	tabContainer.BorderSizePixel = 0
	tabContainer.Parent = main

	local tabLayout = Instance.new('UIListLayout')
	tabLayout.FillDirection = Enum.FillDirection.Horizontal
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabLayout.Padding = UDim.new(0, 6)
	tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
	tabLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	tabLayout.Parent = tabContainer

	local content = Instance.new('Frame')
	content.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 1, -112)
	content.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 112)
	content.BackgroundTransparency = 1
	content.Parent = main

	-- Drag functionality
	local dragData = {}
	header.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragData.dragging = true
			dragData.startPos = input.Position
			dragData.frameStart = main.Position
		end
	end)

	table.insert(window._connections, UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement and dragData.dragging then
			local delta = input.Position - dragData.startPos
			main.Position = UDim2.new(
				dragData.frameStart.X.Scale, dragData.frameStart.X.Offset + delta.X,
				dragData.frameStart.Y.Scale, dragData.frameStart.Y.Offset + delta.Y
			)
		end
	end))

	table.insert(window._connections, UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragData.dragging = false
		end
	end))

	function window:CreatePage(name)
		local page = { Name = name, Elements = {}, _frame = nil, _button = nil }

		local tabBtn = Instance.new('TextButton')
		tabBtn.Size = UDim2.new(0, 0, 0, 32)
		tabBtn.AutomaticSize = Enum.AutomaticSize.X
		tabBtn.BackgroundColor3 = Config.Colors.Surface2
		tabBtn.BorderSizePixel = 0
		tabBtn.Text = name
		tabBtn.TextColor3 = Config.Colors.TextSecondary
		tabBtn.TextSize = 13
		tabBtn.Font = Config.Fonts.Medium
		tabBtn.LayoutOrder = #window.Pages + 1
		tabBtn.Parent = tabContainer
		Corner(tabBtn, Config.Radius.sm)

		local tabPadding = Instance.new('UIPadding')
		tabPadding.PaddingLeft = UDim.new(0, 12)
		tabPadding.PaddingRight = UDim.new(0, 12)
		tabPadding.Parent = tabBtn

		local pageFrame = Instance.new('ScrollingFrame')
		pageFrame.Size = UDim2.new(1, 0, 1, 0)
		pageFrame.BackgroundTransparency = 1
		pageFrame.BorderSizePixel = 0
		pageFrame.ScrollBarThickness = 4
		pageFrame.ScrollBarImageColor3 = Config.Colors.Primary
		pageFrame.ScrollBarImageTransparency = 0.3
		pageFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
		pageFrame.Visible = false
		pageFrame.Parent = content

		local pageLayout = Instance.new('UIListLayout')
		pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
		pageLayout.Padding = UDim.new(0, Config.Layout.RowSpacing)
		pageLayout.Parent = pageFrame

		local pagePadding = Instance.new('UIPadding')
		pagePadding.PaddingTop = UDim.new(0, Config.Spacing.lg)
		pagePadding.PaddingBottom = UDim.new(0, Config.Spacing.xl)
		pagePadding.Parent = pageFrame

		pageLayout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
			pageFrame.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + Config.Spacing.xl * 2)
		end)

		tabBtn.MouseButton1Click:Connect(function()
			for _, p in pairs(window.Pages) do
				p._frame.Visible = false
				Tween(p._button, { 
					BackgroundColor3 = Config.Colors.Surface2, 
					TextColor3 = Config.Colors.TextSecondary
				}, Config.Animation.Medium):Play()
			end
			pageFrame.Visible = true
			Tween(tabBtn, { 
				BackgroundColor3 = Config.Colors.Primary, 
				TextColor3 = Config.Colors.Surface
			}, Config.Animation.Medium):Play()
			window.CurrentPage = page
		end)

		tabBtn.MouseEnter:Connect(function()
			if window.CurrentPage ~= page then
				Tween(tabBtn, { BackgroundColor3 = Config.Colors.Surface3 }, Config.Animation.Fast):Play()
			end
		end)
		tabBtn.MouseLeave:Connect(function()
			if window.CurrentPage ~= page then
				Tween(tabBtn, { BackgroundColor3 = Config.Colors.Surface2 }, Config.Animation.Fast):Play()
			end
		end)

		page._button = tabBtn
		page._frame = pageFrame

		function page:CreateButton(text, callback)
			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundTransparency = 1
			container.Parent = pageFrame

			local btn = Instance.new('TextButton')
			btn.Size = UDim2.new(1, 0, 1, 0)
			btn.BackgroundColor3 = Config.Colors.Primary
			btn.BorderSizePixel = 0
			btn.Text = text
			btn.TextColor3 = Config.Colors.Surface
			btn.TextSize = 14
			btn.Font = Config.Fonts.Medium
			btn.Parent = container
			Corner(btn, Config.Radius.md)

			btn.MouseEnter:Connect(function()
				Tween(btn, { BackgroundColor3 = Config.Colors.PrimaryHover }, Config.Animation.Fast):Play()
			end)
			btn.MouseLeave:Connect(function()
				Tween(btn, { BackgroundColor3 = Config.Colors.Primary }, Config.Animation.Fast):Play()
			end)
			btn.MouseButton1Click:Connect(function()
				Tween(btn, { BackgroundColor3 = Config.Colors.PrimaryDim }, Config.Animation.Fast):Play()
				task.wait(0.06)
				Tween(btn, { BackgroundColor3 = Config.Colors.Primary }, Config.Animation.Fast):Play()
				if callback then callback() end
			end)

			table.insert(page.Elements, container)
			return container
		end

		function page:CreateToggle(text, defaultValue, callback)
			local value = defaultValue or false

			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundColor3 = Config.Colors.Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			Corner(container, Config.Radius.md)
			Stroke(container, Config.Colors.Border)

			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(1, -70, 1, 0)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = Config.Colors.Text
			label.TextSize = 14
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = container

			local toggle = Instance.new('TextButton')
			toggle.Size = UDim2.new(0, 44, 0, 22)
			toggle.Position = UDim2.new(1, -Config.Spacing.lg - 44, 0.5, -11)
			toggle.BackgroundColor3 = value and Config.Colors.Primary or Config.Colors.Surface3
			toggle.BorderSizePixel = 0
			toggle.Text = ''
			toggle.Parent = container
			Corner(toggle, 11)

			local thumb = Instance.new('Frame')
			thumb.Size = UDim2.new(0, 18, 0, 18)
			thumb.Position = value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
			thumb.BackgroundColor3 = Config.Colors.Surface
			thumb.BorderSizePixel = 0
			thumb.Parent = toggle
			Corner(thumb, 9)

			toggle.MouseButton1Click:Connect(function()
				value = not value
				Tween(toggle, { 
					BackgroundColor3 = value and Config.Colors.Primary or Config.Colors.Surface3 
				}, Config.Animation.Medium):Play()
				Tween(thumb, { 
					Position = value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9) 
				}, Config.Animation.Medium):Play()
				if callback then callback(value) end
			end)

			table.insert(page.Elements, container)
			return container, function() return value end
		end

		function page:CreateSlider(text, min, max, defaultValue, callback)
			min, max = min or 0, max or 100
			local value = defaultValue or min

			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight + 20)
			container.BackgroundColor3 = Config.Colors.Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			Corner(container, Config.Radius.md)
			Stroke(container, Config.Colors.Border)

			local headerFrame = Instance.new('Frame')
			headerFrame.Size = UDim2.new(1, 0, 0, 24)
			headerFrame.Position = UDim2.new(0, 0, 0, Config.Spacing.md)
			headerFrame.BackgroundTransparency = 1
			headerFrame.Parent = container

			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(1, -60, 1, 0)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = Config.Colors.Text
			label.TextSize = 14
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = headerFrame

			local valueLabel = Instance.new('TextLabel')
			valueLabel.Size = UDim2.new(0, 50, 1, 0)
			valueLabel.Position = UDim2.new(1, -Config.Spacing.lg - 50, 0, 0)
			valueLabel.BackgroundTransparency = 1
			valueLabel.Text = tostring(value)
			valueLabel.TextColor3 = Config.Colors.Primary
			valueLabel.TextSize = 13
			valueLabel.Font = Config.Fonts.Bold
			valueLabel.TextXAlignment = Enum.TextXAlignment.Right
			valueLabel.Parent = headerFrame

			local track = Instance.new('TextButton')
			track.Size = UDim2.new(1, -Config.Spacing.lg * 2, 0, 8)
			track.Position = UDim2.new(0, Config.Spacing.lg, 1, -Config.Spacing.lg - 4)
			track.BackgroundColor3 = Config.Colors.Surface3
			track.BorderSizePixel = 0
			track.Text = ''
			track.Parent = container
			Corner(track, 4)

			local fill = Instance.new('Frame')
			fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
			fill.BackgroundColor3 = Config.Colors.Primary
			fill.BorderSizePixel = 0
			fill.Parent = track
			Corner(fill, 4)

			local dragging = false

			local function updateSlider(input)
				local percent = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
				value = math.round(min + (max - min) * percent)
				valueLabel.Text = tostring(value)

				Tween(fill, { Size = UDim2.new(percent, 0, 1, 0) }, Config.Animation.Fast):Play()
				if callback then callback(value) end
			end

			track.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
					updateSlider(input)
				end
			end)

			UserInputService.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
					updateSlider(input)
				end
			end)

			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)

			table.insert(page.Elements, container)
			return container, function() return value end
		end

		function page:CreateDropdown(text, options, defaultValue, callback)
			options = options or {}
			local value = defaultValue or (options[1] or 'Select...')
			local isOpen = false

			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundColor3 = Config.Colors.Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			Corner(container, Config.Radius.md)
			Stroke(container, Config.Colors.Border)

			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(0.4, 0, 1, 0)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = Config.Colors.Text
			label.TextSize = 14
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = container

			local dropdown = Instance.new('TextButton')
			dropdown.Size = UDim2.new(0.6, -Config.Spacing.lg, 0, 28)
			dropdown.Position = UDim2.new(0.4, 0, 0.5, -14)
			dropdown.BackgroundColor3 = Config.Colors.Surface2
			dropdown.BorderSizePixel = 0
			dropdown.Text = ''
			dropdown.ClipsDescendants = true
			dropdown.Parent = container
			Corner(dropdown, Config.Radius.sm)
			Stroke(dropdown, Config.Colors.BorderLight)

			local valueText = Instance.new('TextLabel')
			valueText.Size = UDim2.new(1, -28, 1, 0)
			valueText.Position = UDim2.new(0, Config.Spacing.md, 0, 0)
			valueText.BackgroundTransparency = 1
			valueText.Text = value
			valueText.TextColor3 = Config.Colors.Text
			valueText.TextSize = 13
			valueText.Font = Config.Fonts.Regular
			valueText.TextXAlignment = Enum.TextXAlignment.Left
			valueText.Parent = dropdown

			local arrow = Instance.new('TextLabel')
			arrow.Size = UDim2.new(0, 20, 1, 0)
			arrow.Position = UDim2.new(1, -20, 0, 0)
			arrow.BackgroundTransparency = 1
			arrow.Text = 'â–¼'
			arrow.TextColor3 = Config.Colors.TextMuted
			arrow.TextSize = 9
			arrow.Font = Config.Fonts.Regular
			arrow.Parent = dropdown

			local optionsList = Instance.new('Frame')
			optionsList.Size = UDim2.new(0.6, -Config.Spacing.lg, 0, 0)
			optionsList.Position = UDim2.new(0.4, 0, 1, 2)
			optionsList.BackgroundColor3 = Config.Colors.Surface
			optionsList.BorderSizePixel = 0
			optionsList.Visible = false
			optionsList.ZIndex = 1000
			optionsList.Parent = container
			Corner(optionsList, Config.Radius.sm)
			Stroke(optionsList, Config.Colors.BorderLight)

			local optionsLayout = Instance.new('UIListLayout')
			optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
			optionsLayout.Parent = optionsList

			local function toggleDropdown()
				isOpen = not isOpen
				local targetHeight = isOpen and (#options * 28) or 0

				optionsList.Visible = true
				Tween(optionsList, { Size = UDim2.new(0.6, -Config.Spacing.lg, 0, targetHeight) }, Config.Animation.Medium):Play()
				Tween(arrow, { Rotation = isOpen and 180 or 0 }, Config.Animation.Medium):Play()

				if not isOpen then
					task.wait(Config.Animation.Medium)
					optionsList.Visible = false
				end
			end

			dropdown.MouseButton1Click:Connect(toggleDropdown)

			for i, option in ipairs(options) do
				local optionBtn = Instance.new('TextButton')
				optionBtn.Size = UDim2.new(1, 0, 0, 28)
				optionBtn.BackgroundColor3 = Config.Colors.Surface
				optionBtn.BackgroundTransparency = 1
				optionBtn.BorderSizePixel = 0
				optionBtn.Text = ''
				optionBtn.LayoutOrder = i
				optionBtn.Parent = optionsList

				local optionText = Instance.new('TextLabel')
				optionText.Size = UDim2.new(1, -Config.Spacing.md * 2, 1, 0)
				optionText.Position = UDim2.new(0, Config.Spacing.md, 0, 0)
				optionText.BackgroundTransparency = 1
				optionText.Text = option
				optionText.TextColor3 = Config.Colors.Text
				optionText.TextSize = 13
				optionText.Font = Config.Fonts.Regular
				optionText.TextXAlignment = Enum.TextXAlignment.Left
				optionText.Parent = optionBtn

				optionBtn.MouseEnter:Connect(function()
					Tween(optionBtn, { BackgroundTransparency = 0, BackgroundColor3 = Config.Colors.Surface2 }, Config.Animation.Fast):Play()
				end)
				optionBtn.MouseLeave:Connect(function()
					Tween(optionBtn, { BackgroundTransparency = 1 }, Config.Animation.Fast):Play()
				end)
				optionBtn.MouseButton1Click:Connect(function()
					value = option
					valueText.Text = option
					toggleDropdown()
					if callback then callback(option) end
				end)
			end

			table.insert(page.Elements, container)
			return container, function() return value end
		end

		window.Pages[name] = page

		if not window.CurrentPage then
			pageFrame.Visible = true
			Tween(tabBtn, { 
				BackgroundColor3 = Config.Colors.Primary, 
				TextColor3 = Config.Colors.Surface
			}, Config.Animation.Fast):Play()
			window.CurrentPage = page
		end

		return page
	end

	function window:Destroy()
		for _, connection in pairs(window._connections) do
			connection:Disconnect()
		end
		gui:Destroy()
	end

	main.Size = UDim2.new(0, 0, 0, 0)
	Tween(main, { Size = size }, Config.Animation.Slow, Enum.EasingStyle.Quint):Play()

	return window
end

return MinimalGUI
