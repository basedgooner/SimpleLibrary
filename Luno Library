local MinimalGUI = {}

local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')

-- Check for existing GUI instance and destroy it to prevent duplicates
if getgenv then
    local existingGUI = getgenv().MinimalGUI_Instance
    if existingGUI and typeof(existingGUI.DestroyAll) == "function" then
        pcall(function() existingGUI:DestroyAll() end)
    end
end

-- Configuration for GUI appearance and animations
local Config = {
    Colors = {
        Light = {
            Background = Color3.fromRGB(245, 247, 250), -- Lighter background
            Surface = Color3.fromRGB(255, 255, 255),    -- Pure white for card surfaces
            Surface2 = Color3.fromRGB(238, 242, 247),   -- Light gray for subtle elements
            Surface3 = Color3.fromRGB(226, 232, 240),   -- Medium gray for active states/track
            Primary = Color3.fromRGB(99, 102, 241),     -- Vibrant indigo
            PrimaryHover = Color3.fromRGB(129, 132, 255),-- Lighter indigo for hover
            PrimaryDim = Color3.fromRGB(79, 82, 220),   -- Darker indigo for active/pressed
            Text = Color3.fromRGB(30, 41, 59),          -- Dark text
            TextSecondary = Color3.fromRGB(71, 85, 105),-- Muted text for descriptions
            TextMuted = Color3.fromRGB(148, 163, 184),  -- Even lighter text for icons/hints
            Success = Color3.fromRGB(34, 197, 94),      -- Green
            Danger = Color3.fromRGB(239, 68, 68),       -- Red
            Warning = Color3.fromRGB(251, 146, 60),     -- Orange
            Border = Color3.fromRGB(203, 213, 225),     -- Light border
            BorderLight = Color3.fromRGB(226, 232, 240),-- Very light border
            Accent = Color3.fromRGB(147, 51, 234),      -- Purple accent (not widely used)
        },
        Dark = {
            Background = Color3.fromRGB(17, 24, 39),    -- Dark blue-gray background
            Surface = Color3.fromRGB(31, 41, 55),       -- Darker surface for cards
            Surface2 = Color3.fromRGB(55, 65, 81),      -- Medium dark gray for subtle elements
            Surface3 = Color3.fromRGB(75, 85, 99),      -- Lighter dark gray for active states/track
            Primary = Color3.fromRGB(129, 132, 255),    -- Lighter indigo
            PrimaryHover = Color3.fromRGB(159, 162, 255),-- Even lighter indigo for hover
            PrimaryDim = Color3.fromRGB(99, 102, 241),  -- Original indigo for active/pressed
            Text = Color3.fromRGB(248, 250, 252),       -- Light text
            TextSecondary = Color3.fromRGB(160, 174, 192),-- Muted light text
            TextMuted = Color3.fromRGB(100, 116, 139),  -- Even darker light text for icons/hints
            Success = Color3.fromRGB(34, 197, 94),
            Danger = Color3.fromRGB(239, 68, 68),
            Warning = Color3.fromRGB(251, 146, 60),
            Border = Color3.fromRGB(65, 75, 90),        -- Dark border
            BorderLight = Color3.fromRGB(50, 60, 75),   -- Very dark border
            Accent = Color3.fromRGB(147, 51, 234),
        },
    },
    Fonts = {
        Regular = Enum.Font.Gotham,
        Medium = Enum.Font.GothamMedium,
        Bold = Enum.Font.GothamBold,
    },
    Spacing = { xs = 4, sm = 8, md = 12, lg = 16, xl = 24 },
    Radius = { sm = 8, md = 12, lg = 16, xl = 20 }, -- Slightly reduced for a cleaner, less bubbly look
    Animation = { Fast = 0.12, Medium = 0.2, Slow = 0.3 },
    Layout = {
        RowHeight = 48,
        RowSpacing = 12,
        EdgePadding = 20,
        MaxWidth = 580, -- Slightly reduced for a more compact feel
        MaxHeight = 420,
    },
}

-- Helper function for creating tweens
local function Tween(object, properties, duration, style, direction)
    return TweenService:Create(
        object,
        TweenInfo.new(
            duration or Config.Animation.Medium,
            style or Enum.EasingStyle.Quint,
            direction or Enum.EasingDirection.Out
        ),
        properties
    )
end

-- Helper function for adding UICorner
local function Corner(parent, radius)
    local corner = Instance.new('UICorner')
    corner.CornerRadius = UDim.new(0, radius or Config.Radius.lg)
    corner.Parent = parent
    return corner
end

-- Helper function for adding UIStroke (border effect)
local function Stroke(parent, color, thickness, transparency)
    local stroke = Instance.new('UIStroke')
    stroke.Color = color or Color3.new(1, 1, 1)
    stroke.Thickness = thickness or 1
    stroke.Transparency = transparency or 0
    stroke.Parent = parent
    return stroke
end

-- --- NOTIFICATION SYSTEM ---
-- Global container for all notifications (created once)
local NotificationsScreenGui = nil
local NotificationsFrame = nil
local NotificationsListLayout = nil

-- Sets up the single ScreenGui and Frame to hold all notifications
local function setupNotificationContainer()
    if NotificationsScreenGui and NotificationsScreenGui.Parent then return end

    NotificationsScreenGui = Instance.new('ScreenGui')
    NotificationsScreenGui.Name = 'MinimalGUI_Notifications_Container'
    NotificationsScreenGui.Parent = CoreGui
    NotificationsScreenGui.ResetOnSpawn = false
    NotificationsScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Ensures notifications render above other UIs

    NotificationsFrame = Instance.new('Frame')
    NotificationsFrame.Name = 'NotificationsFrame'
    NotificationsFrame.Size = UDim2.new(0, 380, 1, -Config.Spacing.xl * 2) -- Fixed width, height based on padding
    NotificationsFrame.Position = UDim2.new(1, -Config.Spacing.xl - NotificationsFrame.Size.X.Offset, 0, Config.Spacing.xl) -- Aligned to top-right with padding
    NotificationsFrame.BackgroundTransparency = 1
    NotificationsFrame.BorderSizePixel = 0
    NotificationsFrame.Parent = NotificationsScreenGui

    NotificationsListLayout = Instance.new('UIListLayout')
    NotificationsListLayout.FillDirection = Enum.FillDirection.Vertical
    NotificationsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    NotificationsListLayout.Padding = UDim.new(0, Config.Spacing.md) -- Spacing between notifications
    NotificationsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right -- Align notifications to the right
    NotificationsListLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    NotificationsListLayout.Parent = NotificationsFrame
end

-- Queue to manage notification instances
local notificationQueue = {}

-- Creates and manages a single notification pop-up
local function createNotification(message, notificationType)
    setupNotificationContainer() -- Ensure the global container exists

    local colors = Config.Colors.Light -- Notifications always use Light theme for visual consistency

    local bgColor = colors.Surface
    local textColor = colors.Text
    local accentColor = colors.Primary
    local iconText = "ℹ"

    if notificationType == 'success' then
        accentColor = colors.Success
        iconText = "✓"
    elseif notificationType == 'danger' then
        accentColor = colors.Danger
        iconText = "✕"
    elseif notificationType == 'warning' then
        accentColor = colors.Warning
        iconText = "⚠"
    end

    -- Main notification frame, now a child of NotificationsFrame
    local notification = Instance.new('Frame')
    notification.Name = 'Notification_' .. os.time()
    notification.Size = UDim2.new(1, 0, 0, 72) -- Full width of NotificationsFrame, fixed height
    notification.BackgroundTransparency = 1 -- Start transparent, will tween visible
    notification.BorderSizePixel = 0
    notification.Parent = NotificationsFrame -- Parent to the shared frame
    notification.ClipsDescendants = true -- Important for smooth entry/exit animations

    -- Inner frame for background, stroke, and content
    local bgFrame = Instance.new('Frame')
    bgFrame.Size = UDim2.new(1, 0, 1, 0)
    bgFrame.BackgroundColor3 = bgColor
    bgFrame.BorderSizePixel = 0
    bgFrame.Parent = notification
    Corner(bgFrame, Config.Radius.lg) -- Use Config.Radius.lg for notifications
    Stroke(bgFrame, colors.Border, 1)

    -- Accent bar on the left (kept for visual consistency with original design)
    local accentBar = Instance.new('Frame')
    accentBar.Size = UDim2.new(0, 4, 1, -Config.Spacing.md)
    accentBar.Position = UDim2.new(0, Config.Spacing.sm, 0, Config.Spacing.sm)
    accentBar.BackgroundColor3 = accentColor
    accentBar.BorderSizePixel = 0
    accentBar.Parent = bgFrame
    Corner(accentBar, 2)

    -- Icon container
    local iconContainer = Instance.new('Frame')
    iconContainer.Size = UDim2.new(0, 40, 0, 40)
    iconContainer.Position = UDim2.new(0, Config.Spacing.lg + Config.Spacing.sm, 0.5, -20) -- Centered vertically, offset for accent bar
    iconContainer.BackgroundColor3 = accentColor
    iconContainer.BackgroundTransparency = 0.8 -- More transparent for subtle effect
    iconContainer.BorderSizePixel = 0
    iconContainer.Parent = bgFrame
    Corner(iconContainer, 20)

    -- Icon
    local icon = Instance.new('TextLabel')
    icon.Size = UDim2.new(1, 0, 1, 0)
    icon.BackgroundTransparency = 1
    icon.Text = iconText
    icon.TextColor3 = accentColor
    icon.TextSize = 16
    icon.Font = Config.Fonts.Bold
    icon.TextXAlignment = Enum.TextXAlignment.Center
    icon.TextYAlignment = Enum.TextYAlignment.Center
    icon.Parent = iconContainer

    -- Message text
    local text = Instance.new('TextLabel')
    text.Size = UDim2.new(1, - (Config.Spacing.lg * 2 + 40 + Config.Spacing.sm), 1, -Config.Spacing.sm * 2) -- Adjusted size
    text.Position = UDim2.new(0, Config.Spacing.lg * 2 + 40 + Config.Spacing.sm, 0, Config.Spacing.sm) -- Adjusted position
    text.BackgroundTransparency = 1
    text.Text = message
    text.TextColor3 = textColor
    text.TextSize = 14
    text.Font = Config.Fonts.Medium
    text.TextXAlignment = Enum.TextXAlignment.Left
    text.TextYAlignment = Enum.TextYAlignment.Center
    text.TextWrapped = true
    text.RichText = false
    text.Parent = bgFrame

    -- Close button
    local closeBtn = Instance.new('TextButton')
    closeBtn.Size = UDim2.new(0, 24, 0, 24)
    closeBtn.Position = UDim2.new(1, -Config.Spacing.lg - 4, 0, Config.Spacing.sm + 2) -- Adjusted position
    closeBtn.BackgroundColor3 = colors.Surface2
    closeBtn.BackgroundTransparency = 1
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = "×"
    closeBtn.TextColor3 = colors.TextMuted
    closeBtn.TextSize = 16
    closeBtn.Font = Config.Fonts.Medium
    closeBtn.AutoButtonColor = false
    closeBtn.Parent = bgFrame
    Corner(closeBtn, 12)

    -- Close button hover effects
    closeBtn.MouseEnter:Connect(function()
        Tween(closeBtn, {
            BackgroundTransparency = 0,
            BackgroundColor3 = colors.Danger,
            TextColor3 = Color3.fromRGB(255, 255, 255)
        }, Config.Animation.Fast):Play()
        Tween(closeBtn, { Size = UDim2.new(0, 26, 0, 26), Position = UDim2.new(1, -Config.Spacing.lg - 5, 0, Config.Spacing.sm + 1) }, Config.Animation.Fast, Enum.EasingStyle.OutBack):Play()
    end)
    closeBtn.MouseLeave:Connect(function()
        Tween(closeBtn, {
            BackgroundTransparency = 1,
            TextColor3 = colors.TextMuted
        }, Config.Animation.Fast):Play()
        Tween(closeBtn, { Size = UDim2.new(0, 24, 0, 24), Position = UDim2.new(1, -Config.Spacing.lg - 4, 0, Config.Spacing.sm + 2) }, Config.Animation.Fast, Enum.EasingStyle.Quad):Play()
    end)

    -- Progress bar at bottom
    local progressBar = Instance.new('Frame')
    progressBar.Size = UDim2.new(1, -Config.Spacing.md, 0, 3)
    progressBar.Position = UDim2.new(0, Config.Spacing.sm, 1, -Config.Spacing.md)
    progressBar.BackgroundColor3 = colors.Surface3
    progressBar.BackgroundTransparency = 0.5 -- Slightly transparent
    progressBar.BorderSizePixel = 0
    progressBar.Parent = bgFrame
    Corner(progressBar, 2)

    local progressFill = Instance.new('Frame')
    progressFill.Size = UDim2.new(1, 0, 1, 0)
    progressFill.BackgroundColor3 = accentColor
    progressFill.BackgroundTransparency = 0.1 -- More transparent to blend
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressBar
    Corner(progressFill, 2)

    -- Entrance animation for the notification itself
    notification.LayoutOrder = #notificationQueue + 1 -- Set LayoutOrder for UIListLayout
    notification.Position = UDim2.new(1, 0, 0, 0) -- Start off-screen right relative to its container
    
    Tween(notification, { Position = UDim2.new(0, 0, 0, 0) }, Config.Animation.Medium, Enum.EasingStyle.Back, Enum.EasingDirection.Out):Play()
    Tween(bgFrame, { BackgroundTransparency = 0 }, Config.Animation.Medium):Play() -- Fade in inner frame

    table.insert(notificationQueue, notification)

    -- Auto dismiss functionality
    local dismissTween
    local progressTween = Tween(progressFill, { Size = UDim2.new(0, 0, 1, 0) }, 3.5)
    progressTween:Play()

    local function dismissNotification()
        if dismissTween then return end
        dismissTween = true

        -- Exit animations
        Tween(notification, {
            Position = UDim2.new(1, notification.Size.X.Offset, 0, 0), -- Slide out to right
            BackgroundTransparency = 1, -- Fade out the main frame
        }, Config.Animation.Medium, Enum.EasingStyle.Quint, Enum.EasingDirection.In):Play()

        -- Remove from queue and destroy after animation
        local indexToRemove = nil
        for i, item in ipairs(notificationQueue) do
            if item == notification then
                indexToRemove = i
                break
            end
        end
        if indexToRemove then
            table.remove(notificationQueue, indexToRemove)
        end

        task.wait(Config.Animation.Medium + 0.05) -- Wait slightly longer for animation
        notification:Destroy()
    end

    -- Close button click
    closeBtn.MouseButton1Click:Connect(dismissNotification)

    -- Auto dismiss after progress completes
    progressTween.Completed:Connect(dismissNotification)
end

-- --- MAIN WINDOW CREATION ---
function MinimalGUI:CreateWindow(title, size)
    title = title or 'MinimalGUI'
    size = size or UDim2.new(0, Config.Layout.MaxWidth, 0, Config.Layout.MaxHeight)

    local window = {
        Pages = {},
        CurrentPage = nil,
        _connections = {},
        _isDarkTheme = false,
    }

    self.CurrentWindow = window

    function window:getColors()
        return self._isDarkTheme and Config.Colors.Dark or Config.Colors.Light
    end

    function window:Notify(message, notificationType)
        task.spawn(createNotification, message, notificationType or 'info')
    end

    local function updateTheme()
        local colors = window:getColors()
        main.BackgroundColor3 = colors.Background
        header.BackgroundColor3 = colors.Surface
        headerSeparator.BackgroundColor3 = colors.BorderLight -- Use BorderLight for a more subtle line
        titleText.TextColor3 = colors.Text
        themeBtn.BackgroundColor3 = colors.Surface2
        themeBtn.TextColor3 = colors.TextMuted
        closeBtn.BackgroundColor3 = colors.Surface2
        closeBtn.TextColor3 = colors.TextMuted

        local mainStroke = main:FindFirstChild('UIStroke')
        if mainStroke then
            mainStroke.Color = colors.Border
        end

        for _, page in pairs(window.Pages) do
            if page._button then
                if window.CurrentPage == page then
                    page._button.BackgroundColor3 = colors.Primary
                    page._button.TextColor3 = Color3.fromRGB(255, 255, 255)
                    local tabBtnStroke = page._button:FindFirstChild("UIStroke")
                    if tabBtnStroke then tabBtnStroke.Transparency = 0 end -- Active tab always shows stroke
                else
                    page._button.BackgroundColor3 = colors.Surface2
                    page._button.TextColor3 = colors.TextSecondary
                    local tabBtnStroke = page._button:FindFirstChild("UIStroke")
                    if tabBtnStroke then tabBtnStroke.Transparency = 1 end
                end
            end

            -- Update existing elements on the page (requires traversing, not ideal for a theme switch)
            -- For a full theme switch, elements should be recreated or their properties bound to theme changes.
            -- For this scope, we only update the main UI and buttons.
        end
    end

    local gui = Instance.new('ScreenGui')
    gui.Name = 'MinimalGUI_MainWindow'
    gui.Parent = CoreGui
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- For correct layering with notifications

    local main = Instance.new('Frame')
    main.Size = size
    main.Position = UDim2.new(0.5, 0, 0.5, 0)
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.BackgroundColor3 = window:getColors().Background
    main.BorderSizePixel = 0
    main.Parent = gui
    Corner(main, Config.Radius.xl)
    Stroke(main, window:getColors().Border, 1.5)
    main.Transparency = 1 -- Start transparent for fade-in
    main.LayoutOrder = 1 -- Ensure it's not affected by UIListLayout in NotificationsFrame

    local header = Instance.new('Frame')
    header.Size = UDim2.new(1, 0, 0, 56)
    header.BackgroundColor3 = window:getColors().Surface
    header.BorderSizePixel = 0
    header.Parent = main
    Corner(header, Config.Radius.xl) -- Apply corner to header as well for consistency

    local headerSeparator = Instance.new('Frame')
    headerSeparator.Size = UDim2.new(1, -Config.Spacing.xl, 0, 1) -- Wider separator
    headerSeparator.Position = UDim2.new(0, Config.Spacing.lg, 1, -1) -- Adjusted position
    headerSeparator.BackgroundColor3 = window:getColors().BorderLight
    headerSeparator.BorderSizePixel = 0
    headerSeparator.Parent = header

    local titleText = Instance.new('TextLabel')
    titleText.Size = UDim2.new(0, 200, 0, 20)
    titleText.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 18)
    titleText.BackgroundTransparency = 1
    titleText.Text = title
    titleText.TextColor3 = window:getColors().Text
    titleText.TextSize = 15
    titleText.Font = Config.Fonts.Bold
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = header

    local themeBtn = Instance.new('TextButton')
    themeBtn.Size = UDim2.new(0, 28, 0, 28)
    themeBtn.Position = UDim2.new(1, -Config.Layout.EdgePadding - 62, 0, 14)
    themeBtn.BackgroundColor3 = window:getColors().Surface2
    themeBtn.BorderSizePixel = 0
    themeBtn.Text = '☀'
    themeBtn.TextColor3 = window:getColors().TextMuted
    themeBtn.TextSize = 14
    themeBtn.Font = Config.Fonts.Medium
    themeBtn.AutoButtonColor = false
    themeBtn.Parent = header
    Corner(themeBtn, 14)

    local themeBtnStroke = Stroke(themeBtn, window:getColors().PrimaryHover, 1, 1)
    themeBtnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    themeBtn.MouseEnter:Connect(function()
        Tween(themeBtn, {
            BackgroundColor3 = window:getColors().Surface3,
            TextColor3 = window:getColors().Text,
            Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -Config.Layout.EdgePadding - 63, 0, 13) -- Slightly larger
        }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        Tween(themeBtnStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
    end)
    themeBtn.MouseLeave:Connect(function()
        Tween(themeBtn, {
            BackgroundColor3 = window:getColors().Surface2,
            TextColor3 = window:getColors().TextMuted,
            Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(1, -Config.Layout.EdgePadding - 62, 0, 14) -- Back to original size
        }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        Tween(themeBtnStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
    end)
    themeBtn.MouseButton1Click:Connect(function()
        Tween(themeBtn, { Size = UDim2.new(0, 26, 0, 26), Position = UDim2.new(1, -Config.Layout.EdgePadding - 61, 0, 15) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        task.wait(0.05)
        Tween(themeBtn, { Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(1, -Config.Layout.EdgePadding - 62, 0, 14) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        window._isDarkTheme = not window._isDarkTheme
        themeBtn.Text = window._isDarkTheme and '🌙' or '☀'
        updateTheme()
    end)

    local closeBtn = Instance.new('TextButton')
    closeBtn.Size = UDim2.new(0, 28, 0, 28)
    closeBtn.Position = UDim2.new(1, -Config.Layout.EdgePadding - 28, 0, 14)
    closeBtn.BackgroundColor3 = window:getColors().Surface2
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = '×'
    closeBtn.TextColor3 = window:getColors().TextMuted
    closeBtn.TextSize = 16
    closeBtn.Font = Config.Fonts.Medium
    closeBtn.AutoButtonColor = false
    closeBtn.Parent = header
    Corner(closeBtn, 14)

    local closeBtnStroke = Stroke(closeBtn, window:getColors().Danger, 1, 1)
    closeBtnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    closeBtn.MouseEnter:Connect(function()
        Tween(closeBtn, {
            BackgroundColor3 = window:getColors().Danger,
            TextColor3 = window:getColors().Surface,
            Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -Config.Layout.EdgePadding - 29, 0, 13) -- Slightly larger
        }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        Tween(closeBtnStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
    end)
    closeBtn.MouseLeave:Connect(function()
        Tween(closeBtn, {
            BackgroundColor3 = window:getColors().Surface2,
            TextColor3 = window:getColors().TextMuted,
            Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(1, -Config.Layout.EdgePadding - 28, 0, 14) -- Back to original size
        }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        Tween(closeBtnStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
    end)
    closeBtn.MouseButton1Click:Connect(function()
        Tween(closeBtn, { Size = UDim2.new(0, 26, 0, 26), Position = UDim2.new(1, -Config.Layout.EdgePadding - 27, 0, 15) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        task.wait(0.05)
        Tween(closeBtn, { Size = UDim2.new(0, 28, 0, 28), Position = UDim2.new(1, -Config.Layout.EdgePadding - 28, 0, 14) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()

        -- Exit animation
        Tween(main, {
            Size = UDim2.new(0.8, 0, 0.8, 0), -- Scale down to 80%
            Transparency = 1,                 -- Fade out
            Position = UDim2.new(0.5, 0, 0.5, 0) -- Remain centered
        }, Config.Animation.Slow, Enum.EasingStyle.Quint, Enum.EasingDirection.In):Play()

        task.wait(Config.Animation.Slow)
        gui:Destroy()
    end)

    local tabContainer = Instance.new('Frame')
    tabContainer.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 0, 32)
    tabContainer.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 68)
    tabContainer.BackgroundTransparency = 1
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = main

    local tabLayout = Instance.new('UIListLayout')
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 6)
    tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    tabLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    tabLayout.Parent = tabContainer

    local content = Instance.new('Frame')
    content.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 1, -116)
    content.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 116)
    content.BackgroundTransparency = 1
    content.Parent = main

    local dragData = {}
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragData.dragging = true
            dragData.startPos = input.Position
            dragData.frameStart = main.Position
        end
    end)

    table.insert(
        window._connections,
        UserInputService.InputChanged:Connect(function(input)
            if
                input.UserInputType == Enum.UserInputType.MouseMovement
                and dragData.dragging
            then
                local delta = input.Position - dragData.startPos
                main.Position = UDim2.new(
                    dragData.frameStart.X.Scale,
                    dragData.frameStart.X.Offset + delta.X,
                    dragData.frameStart.Y.Scale,
                    dragData.frameStart.Y.Offset + delta.Y
                )
            end
        end)
    )

    table.insert(
        window._connections,
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragData.dragging = false
            end
        end)
    )

    function window:CreatePage(name)
        local page = { Name = name, Elements = {}, _frame = nil, _button = nil }

        local tabBtn = Instance.new('TextButton')
        tabBtn.Size = UDim2.new(0, 0, 0, 32)
        tabBtn.AutomaticSize = Enum.AutomaticSize.X
        tabBtn.BackgroundColor3 = window:getColors().Surface2
        tabBtn.BorderSizePixel = 0
        tabBtn.Text = name
        tabBtn.TextColor3 = window:getColors().TextSecondary
        tabBtn.TextSize = 13
        tabBtn.Font = Config.Fonts.Medium
        tabBtn.LayoutOrder = #window.Pages + 1
        tabBtn.AutoButtonColor = false
        tabBtn.Parent = tabContainer
        Corner(tabBtn, Config.Radius.lg)

        local tabPadding = Instance.new('UIPadding')
        tabPadding.PaddingLeft = UDim.new(0, 12)
        tabPadding.PaddingRight = UDim.new(0, 12)
        tabPadding.Parent = tabBtn

        local tabBtnStroke = Stroke(tabBtn, window:getColors().PrimaryHover, 1, 1)
        tabBtnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

        local pageFrame = Instance.new('ScrollingFrame')
        pageFrame.Size = UDim2.new(1, 0, 1, 0)
        pageFrame.BackgroundTransparency = 1
        pageFrame.BorderSizePixel = 0
        pageFrame.ScrollBarThickness = 4
        pageFrame.ScrollBarImageColor3 = window:getColors().Primary
        pageFrame.ScrollBarImageTransparency = 0.6 -- Make scrollbar more subtle
        pageFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        pageFrame.Visible = false
        pageFrame.Parent = content

        local pageLayout = Instance.new('UIListLayout')
        pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
        pageLayout.Padding = UDim.new(0, Config.Layout.RowSpacing)
        pageLayout.Parent = pageFrame

        local pagePadding = Instance.new('UIPadding')
        pagePadding.PaddingTop = UDim.new(0, Config.Spacing.md) -- Reduced top padding
        pagePadding.PaddingBottom = UDim.new(0, Config.Spacing.xl)
        pagePadding.Parent = pageFrame

        pageLayout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            pageFrame.CanvasSize = UDim2.new(
                0,
                0,
                0,
                pageLayout.AbsoluteContentSize.Y + Config.Spacing.xl * 2
            )
        end)

        tabBtn.MouseButton1Click:Connect(function()
            for _, p in pairs(window.Pages) do
                p._frame.Visible = false
                Tween(p._button, {
                    BackgroundColor3 = window:getColors().Surface2,
                    TextColor3 = window:getColors().TextSecondary,
                    Size = UDim2.new(p._button.Size.X.Scale, p._button.Size.X.Offset, 0, 32)
                }, Config.Animation.Medium):Play()
                local btnStroke = p._button:FindFirstChild("UIStroke")
                if btnStroke then Tween(btnStroke, { Transparency = 1 }, Config.Animation.Medium):Play() end
            end
            pageFrame.Visible = true
            Tween(tabBtn, {
                BackgroundColor3 = window:getColors().Primary,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                Size = UDim2.new(tabBtn.Size.X.Scale, tabBtn.Size.X.Offset, 0, 32)
            }, Config.Animation.Medium):Play()
            Tween(tabBtnStroke, { Transparency = 0 }, Config.Animation.Medium):Play()
            window.CurrentPage = page
        end)

        tabBtn.MouseEnter:Connect(function()
            if window.CurrentPage ~= page then
                Tween(
                    tabBtn,
                    { BackgroundColor3 = window:getColors().Surface3 },
                    Config.Animation.Fast
                ):Play()
            end
            Tween(tabBtnStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
            Tween(tabBtn, { Size = UDim2.new(tabBtn.Size.X.Scale, tabBtn.Size.X.Offset + 2, 0, 34), Position = UDim2.new(0,tabBtn.Position.X.Offset -1, 0, tabBtn.Position.Y.Offset - 1) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        end)
        tabBtn.MouseLeave:Connect(function()
            if window.CurrentPage ~= page then
                Tween(
                    tabBtn,
                    { BackgroundColor3 = window:getColors().Surface2 },
                    Config.Animation.Fast
                ):Play()
            end
            Tween(tabBtnStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
            Tween(tabBtn, { Size = UDim2.new(tabBtn.Size.X.Scale, tabBtn.Size.X.Offset - 2, 0, 32), Position = UDim2.new(0,tabBtn.Position.X.Offset +1, 0, tabBtn.Position.Y.Offset + 1) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
        end)

        page._button = tabBtn
        page._frame = pageFrame

        function page:CreateButton(text, callback)
            local container = Instance.new('Frame')
            container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
            container.BackgroundTransparency = 1
            container.Parent = pageFrame

            local btn = Instance.new('TextButton')
            btn.Size = UDim2.new(1, 0, 1, 0)
            btn.BackgroundColor3 = window:getColors().Primary
            btn.BorderSizePixel = 0
            btn.Text = text
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            btn.TextSize = 14
            btn.Font = Config.Fonts.Medium
            btn.AutoButtonColor = false
            btn.Parent = container
            Corner(btn, Config.Radius.md) -- Use md radius for buttons for a slightly sharper look

            local btnStroke = Stroke(btn, window:getColors().PrimaryHover, 1, 1)
            btnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            btn.MouseEnter:Connect(function()
                Tween(btn, {
                    BackgroundColor3 = window:getColors().PrimaryHover,
                    Size = UDim2.new(1, 2, 1, 2), Position = UDim2.new(-0.001, -1, -0.001, -1) -- Slightly scale up
                }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
                Tween(btnStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
            end)
            btn.MouseLeave:Connect(function()
                Tween(btn, {
                    BackgroundColor3 = window:getColors().Primary,
                    Size = UDim2.new(1, 0, 1, 0), Position = UDim2.new(0, 0, 0, 0) -- Back to original size
                }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
                Tween(btnStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
            end)
            btn.MouseButton1Click:Connect(function()
                Tween(btn, {
                    BackgroundColor3 = window:getColors().PrimaryDim,
                    Size = UDim2.new(1, -2, 1, -2), Position = UDim2.new(0.001, 1, 0.001, 1) -- Slightly scale down
                }, Config.Animation.Fast):Play()
                task.wait(0.06)
                Tween(btn, {
                    BackgroundColor3 = window:getColors().Primary,
                    Size = UDim2.new(1, 0, 1, 0), Position = UDim2.new(0, 0, 0, 0)
                }, Config.Animation.Fast):Play()
                if callback then
                    callback()
                end
            end)

            table.insert(page.Elements, container)
            return container
        end

        function page:CreateToggle(text, defaultValue, callback)
            local value = defaultValue or false

            local container = Instance.new('Frame')
            container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
            container.BackgroundColor3 = window:getColors().Surface
            container.BorderSizePixel = 0
            container.Parent = pageFrame
            Corner(container, Config.Radius.md) -- Use md radius for consistency
            Stroke(container, window:getColors().Border)

            local label = Instance.new('TextLabel')
            label.Size = UDim2.new(1, -70, 1, 0)
            label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = window:getColors().Text
            label.TextSize = 14
            label.Font = Config.Fonts.Regular
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = container

            local toggle = Instance.new('TextButton')
            toggle.Size = UDim2.new(0, 44, 0, 22)
            toggle.Position = UDim2.new(1, -Config.Spacing.lg - 44, 0.5, -11)
            toggle.BackgroundColor3 = value and window:getColors().Primary or window:getColors().Surface3
            toggle.BorderSizePixel = 0
            toggle.Text = ''
            toggle.AutoButtonColor = false
            toggle.Parent = container
            Corner(toggle, 11)

            local toggleStroke = Stroke(toggle, window:getColors().PrimaryHover, 1, 1)

            local thumb = Instance.new('Frame')
            thumb.Size = UDim2.new(0, 18, 0, 18)
            thumb.Position = value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 4, 0.5, -9) -- Adjusted initial position
            thumb.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            thumb.BorderSizePixel = 0
            thumb.Parent = toggle
            Corner(thumb, 9)

            toggle.MouseEnter:Connect(function()
                Tween(toggleStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
                Tween(toggle, { Size = UDim2.new(0, 46, 0, 24), Position = UDim2.new(1, -Config.Spacing.lg - 45, 0.5, -12) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
                if not value then -- Only scale thumb if not currently active
                    Tween(thumb, { Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(thumb.Position.X.Scale, thumb.Position.X.Offset - 1, 0.5, -10) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
                end
            end)
            toggle.MouseLeave:Connect(function()
                Tween(toggleStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
                Tween(toggle, { Size = UDim2.new(0, 44, 0, 22), Position = UDim2.new(1, -Config.Spacing.lg - 44, 0.5, -11) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
                if not value then
                    Tween(thumb, { Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(thumb.Position.X.Scale, thumb.Position.X.Offset + 1, 0.5, -9) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
                end
            end)

            toggle.MouseButton1Click:Connect(function()
                value = not value
                Tween(toggle, {
                    BackgroundColor3 = value and window:getColors().Primary or window:getColors().Surface3,
                }, Config.Animation.Medium):Play()
                Tween(thumb, {
                    Position = value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 4, 0.5, -9),
                    Size = UDim2.new(0, 20, 0, 20), -- Animate to a slightly larger size on click
                }, Config.Animation.Medium, Enum.EasingStyle.OutBack):Play()
                task.wait(0.1) -- Small delay before shrinking back
                Tween(thumb, {
                    Size = UDim2.new(0, 18, 0, 18), -- Shrink back to original size
                }, Config.Animation.Fast):Play()
                if callback then
                    callback(value)
                end
            end)

            table.insert(page.Elements, container)
            return container, function()
                return value
            end
        end

        function page:CreateSlider(text, min, max, defaultValue, callback)
            min, max = min or 0, max or 100
            local value = defaultValue or min

            local container = Instance.new('Frame')
            container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight + 20)
            container.BackgroundColor3 = window:getColors().Surface
            container.BorderSizePixel = 0
            container.Parent = pageFrame
            Corner(container, Config.Radius.md)
            Stroke(container, window:getColors().Border)

            local headerFrame = Instance.new('Frame')
            headerFrame.Size = UDim2.new(1, 0, 0, 24)
            headerFrame.Position = UDim2.new(0, 0, 0, Config.Spacing.md)
            headerFrame.BackgroundTransparency = 1
            headerFrame.Parent = container

            local label = Instance.new('TextLabel')
            label.Size = UDim2.new(1, -60, 1, 0)
            label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = window:getColors().Text
            label.TextSize = 14
            label.Font = Config.Fonts.Regular
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = headerFrame

            local valueLabel = Instance.new('TextLabel')
            valueLabel.Size = UDim2.new(0, 50, 1, 0)
            valueLabel.Position = UDim2.new(1, -Config.Spacing.lg - 50, 0, 0)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Text = tostring(value)
            valueLabel.TextColor3 = window:getColors().Primary
            valueLabel.TextSize = 13
            valueLabel.Font = Config.Fonts.Bold
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right
            valueLabel.Parent = headerFrame

            local track = Instance.new('TextButton')
            track.Size = UDim2.new(1, -Config.Spacing.lg * 2, 0, 8)
            track.Position = UDim2.new(0, Config.Spacing.lg, 1, -Config.Spacing.lg - 4)
            track.BackgroundColor3 = window:getColors().Surface3
            track.BorderSizePixel = 0
            track.Text = ''
            track.AutoButtonColor = false
            track.Parent = container
            Corner(track, 4)

            local trackStroke = Stroke(track, window:getColors().PrimaryHover, 1, 1)
            trackStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            local fill = Instance.new('Frame')
            fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
            fill.BackgroundColor3 = window:getColors().Primary
            fill.BorderSizePixel = 0
            fill.Parent = track
            Corner(fill, 4)

            local thumb = Instance.new('Frame') -- Dedicated thumb for better animation
            thumb.Size = UDim2.new(0, 16, 0, 16)
            thumb.Position = UDim2.new(fill.Size.X.Scale, -8, 0.5, -8) -- Position at end of fill
            thumb.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            thumb.BorderSizePixel = 0
            thumb.Parent = track
            Corner(thumb, 8)
            Stroke(thumb, window:getColors().Primary, 1)

            local dragging = false

            local function updateSlider(input)
                local percent = math.clamp(
                    (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X,
                    0, 1
                )
                value = math.round(min + (max - min) * percent)
                valueLabel.Text = tostring(value)
                Tween(fill, { Size = UDim2.new(percent, 0, 1, 0) }, Config.Animation.Fast):Play()
                Tween(thumb, { Position = UDim2.new(percent, -8, 0.5, -8) }, Config.Animation.Fast):Play()
                if callback then callback(value) end
            end

            track.MouseEnter:Connect(function()
                Tween(trackStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
            end)
            track.MouseLeave:Connect(function()
                Tween(trackStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
            end)

            track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateSlider(input)
                    Tween(thumb, { Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(thumb.Position.X.Scale, -10, 0.5, -10) }, Config.Animation.Fast, Enum.EasingStyle.OutBack):Play()
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
                    updateSlider(input)
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    Tween(thumb, { Size = UDim2.new(0, 16, 0, 16), Position = UDim2.new(thumb.Position.X.Scale, -8, 0.5, -8) }, Config.Animation.Fast, Enum.EasingStyle.OutBack):Play()
                end
            end)

            table.insert(page.Elements, container)
            return container, function() return value end
        end

        function page:CreateDropdown(text, options, defaultValue, callback)
            options = options or {}
            local value = defaultValue or (options[1] or 'Select...')
            local isOpen = false

            local container = Instance.new('Frame')
            container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
            container.BackgroundColor3 = window:getColors().Surface
            container.BorderSizePixel = 0
            container.Parent = pageFrame
            Corner(container, Config.Radius.md)
            Stroke(container, window:getColors().Border)

            local label = Instance.new('TextLabel')
            label.Size = UDim2.new(0.4, 0, 1, 0)
            label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = window:getColors().Text
            label.TextSize = 14
            label.Font = Config.Fonts.Regular
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = container

            local dropdown = Instance.new('TextButton')
            dropdown.Size = UDim2.new(0.6, -Config.Spacing.lg, 0, 28)
            dropdown.Position = UDim2.new(0.4, 0, 0.5, -14)
            dropdown.BackgroundColor3 = window:getColors().Surface2
            dropdown.BorderSizePixel = 0
            dropdown.Text = ''
            dropdown.ClipsDescendants = true
            dropdown.AutoButtonColor = false
            dropdown.Parent = container
            dropdown.ZIndex = 5
            Corner(dropdown, Config.Radius.sm)

            local dropdownStroke = Stroke(dropdown, window:getColors().PrimaryHover, 1, 1)
            dropdownStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            local valueText = Instance.new('TextLabel')
            valueText.Size = UDim2.new(1, -28, 1, 0)
            valueText.Position = UDim2.new(0, Config.Spacing.md, 0, 0)
            valueText.BackgroundTransparency = 1
            valueText.Text = value
            valueText.TextColor3 = window:getColors().Text
            valueText.TextSize = 13
            valueText.Font = Config.Fonts.Regular
            valueText.TextXAlignment = Enum.TextXAlignment.Left
            valueText.Parent = dropdown

            local arrow = Instance.new('TextLabel')
            arrow.Size = UDim2.new(0, 20, 1, 0)
            arrow.Position = UDim2.new(1, -20, 0, 0)
            arrow.BackgroundTransparency = 1
            arrow.Text = '▼'
            arrow.TextColor3 = window:getColors().TextMuted
            arrow.TextSize = 9
            arrow.Font = Config.Fonts.Regular
            arrow.Parent = dropdown

            dropdown.MouseEnter:Connect(function()
                Tween(dropdownStroke, { Transparency = 0 }, Config.Animation.Fast):Play()
                Tween(dropdown, { Size = UDim2.new(0.6, -Config.Spacing.lg + 2, 0, 30), Position = UDim2.new(0.4, -1, 0.5, -15) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
            end)
            dropdown.MouseLeave:Connect(function()
                Tween(dropdownStroke, { Transparency = 1 }, Config.Animation.Fast):Play()
                Tween(dropdown, { Size = UDim2.new(0.6, -Config.Spacing.lg, 0, 28), Position = UDim2.new(0.4, 0, 0.5, -14) }, Config.Animation.Fast, Enum.EasingStyle.OutQuad):Play()
            end)

            local optionsList = Instance.new('Frame')
            optionsList.Size = UDim2.new(0.6, -Config.Spacing.lg, 0, 0) -- Start at height 0
            optionsList.Position = UDim2.new(0.4, 0, 1, 2)
            optionsList.BackgroundColor3 = window:getColors().Surface
            optionsList.BorderSizePixel = 0
            optionsList.Visible = false
            optionsList.ZIndex = 6
            optionsList.Parent = container
            Corner(optionsList, Config.Radius.sm)
            Stroke(optionsList, window:getColors().BorderLight)
            optionsList.ClipsDescendants = true -- Important for smooth height animation

            local optionsLayout = Instance.new('UIListLayout')
            optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
            optionsLayout.Parent = optionsList

            local function toggleDropdown()
                isOpen = not isOpen
                local targetHeight = isOpen and (#options * 28) or 0
                optionsList.Visible = true
                Tween(optionsList, { Size = UDim2.new(0.6, -Config.Spacing.lg, 0, targetHeight) }, Config.Animation.Medium, Enum.EasingStyle.OutQuint):Play()
                Tween(arrow, { Rotation = isOpen and 180 or 0 }, Config.Animation.Medium):Play()
                if not isOpen then
                    task.wait(Config.Animation.Medium)
                    optionsList.Visible = false
                end
            end

            dropdown.MouseButton1Click:Connect(toggleDropdown)

            for i, option in ipairs(options) do
                local optionBtn = Instance.new('TextButton')
                optionBtn.Size = UDim2.new(1, 0, 0, 28)
                optionBtn.BackgroundColor3 = window:getColors().Surface
                optionBtn.BackgroundTransparency = 1
                optionBtn.BorderSizePixel = 0
                optionBtn.Text = ''
                optionBtn.LayoutOrder = i
                optionBtn.AutoButtonColor = false
                optionBtn.Parent = optionsList
                optionBtn.ZIndex = 6

                local optionText = Instance.new('TextLabel')
                optionText.Size = UDim2.new(1, -Config.Spacing.md * 2, 1, 0)
                optionText.Position = UDim2.new(0, Config.Spacing.md, 0, 0)
                optionText.BackgroundTransparency = 1
                optionText.Text = option
                optionText.TextColor3 = window:getColors().Text
                optionText.TextSize = 13
                optionText.Font = Config.Fonts.Regular
                optionText.TextXAlignment = Enum.TextXAlignment.Left
                optionText.Parent = optionBtn

                optionBtn.MouseEnter:Connect(function()
                    Tween(optionBtn, {
                        BackgroundTransparency = 0,
                        BackgroundColor3 = window:getColors().Surface2,
                    }, Config.Animation.Fast):Play()
                end)
                optionBtn.MouseLeave:Connect(function()
                    Tween(optionBtn, { BackgroundTransparency = 1 }, Config.Animation.Fast):Play()
                end)
                optionBtn.MouseButton1Click:Connect(function()
                    value = option
                    valueText.Text = option
                    toggleDropdown()
                    if callback then callback(option) end
                end)
            end

            table.insert(page.Elements, container)
            return container, function() return value end
        end

        window.Pages[name] = page

        if not window.CurrentPage then
            pageFrame.Visible = true
            Tween(tabBtn, {
                BackgroundColor3 = window:getColors().Primary,
                TextColor3 = Color3.fromRGB(255, 255, 255),
            }, Config.Animation.Fast):Play()
            tabBtnStroke.Transparency = 0 -- Ensure active tab stroke is visible
            window.CurrentPage = page
        end

        return page
    end

    function window:Destroy()
        for _, connection in pairs(window._connections) do
            connection:Disconnect()
        end
        if gui and gui.Parent then
            gui:Destroy()
        end
    end

    -- Initial entrance animation for the main window
    main.Size = UDim2.new(size.X.Scale * 0.8, size.X.Offset * 0.8, size.Y.Scale * 0.8, size.Y.Offset * 0.8) -- Start at 80% scale
    Tween(main, {
        Size = size,
        Transparency = 0,
    }, Config.Animation.Slow, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()

    return window
end

-- Expose MinimalGUI_Instance to global environment for detection
if getgenv then
    getgenv().MinimalGUI_Instance = MinimalGUI
end

-- Destroys all active GUI elements created by this library instance
function MinimalGUI:DestroyAll()
    if typeof(self.CurrentWindow) == "table" and self.CurrentWindow.Destroy then
        pcall(function() self.CurrentWindow:Destroy() end)
    end

    -- Clean up all notification GUIs
    for _, notif in ipairs(notificationQueue) do
        if notif then
            pcall(function() notif:Destroy() end)
        end
    end
    notificationQueue = {}

    -- Destroy the global notification container
    if NotificationsScreenGui then
        pcall(function() NotificationsScreenGui:Destroy() end)
    end
    NotificationsScreenGui = nil
    NotificationsFrame = nil
    NotificationsListLayout = nil

    self.CurrentWindow = nil

    -- Clear the table contents and metatable
    setmetatable(self, nil)
    for k in pairs(self) do
        self[k] = nil
    end
end

return MinimalGUI
