local MinimalGUI = {}
local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')

-- Clean up any previous instances of the GUI
if getgenv and getgenv().MinimalGUI_Instance then
	pcall(function()
		getgenv().MinimalGUI_Instance:DestroyAll()
	end)
end

--[[ CONFIGURATION ]]--
-- Defines the aesthetic and behavior of the GUI components.
local Config = {
	Colors = {
		Light = {
			Background = Color3.fromRGB(247, 247, 248),
			Surface = Color3.fromRGB(255, 255, 255),
			Surface2 = Color3.fromRGB(238, 238, 241),
			Surface3 = Color3.fromRGB(224, 224, 229),
			Primary = Color3.fromRGB(99, 102, 241),
			PrimaryHover = Color3.fromRGB(129, 140, 248),
			Text = Color3.fromRGB(30, 30, 40),
			TextSecondary = Color3.fromRGB(82, 82, 98),
			TextMuted = Color3.fromRGB(150, 150, 165),
			Border = Color3.fromRGB(221, 221, 226),
		},
		Dark = {
			Background = Color3.fromRGB(18, 18, 22),
			Surface = Color3.fromRGB(28, 28, 34),
			Surface2 = Color3.fromRGB(42, 42, 50),
			Surface3 = Color3.fromRGB(58, 58, 68),
			Primary = Color3.fromRGB(99, 102, 241),
			PrimaryHover = Color3.fromRGB(79, 70, 229),
			Text = Color3.fromRGB(238, 238, 241),
			TextSecondary = Color3.fromRGB(160, 160, 175),
			TextMuted = Color3.fromRGB(100, 100, 115),
			Border = Color3.fromRGB(45, 45, 54),
		},
		-- Shared accent colors
		Accent = {
			Success = Color3.fromRGB(34, 197, 94),
			Danger = Color3.fromRGB(239, 68, 68),
			Warning = Color3.fromRGB(251, 191, 36),
		}
	},
	Fonts = {
		Regular = Enum.Font.Gotham,
		Medium = Enum.Font.GothamMedium,
		Bold = Enum.Font.GothamBold,
	},
	Spacing = { xs = 4, sm = 8, md = 12, lg = 16, xl = 24 },
	Radius = { sm = 6, md = 8, lg = 12, xl = 16 },
	Animation = { Fast = 0.15, Medium = 0.2, Slow = 0.3 },
	Layout = {
		RowHeight = 44,
		RowSpacing = 12,
		EdgePadding = 18,
		MaxWidth = 550,
		MaxHeight = 400,
	},
}


--[[ UTILITY FUNCTIONS ]]--

-- A consistent, smooth tweening function for all animations.
local function Tween(object, properties)
	return TweenService:Create(
		object,
		TweenInfo.new(Config.Animation.Medium, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
		properties
	)
end

-- Creates a UICorner instance for rounded edges.
local function Corner(parent, radiusKey)
	local corner = Instance.new('UICorner')
	corner.CornerRadius = UDim.new(0, Config.Radius[radiusKey] or Config.Radius.lg)
	corner.Parent = parent
	return corner
end

-- Creates a subtle UIGradient for a glossy effect.
local function AddGloss(parent)
	local gloss = Instance.new('UIGradient')
	gloss.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
		ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1)),
	})
	gloss.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0.95),
		NumberSequenceKeypoint.new(0.5, 0.98),
		NumberSequenceKeypoint.new(1, 0.95),
	})
	gloss.Rotation = 45
	gloss.Parent = parent
	return gloss
end


--[[ NOTIFICATION SYSTEM ]]--
local notificationQueue = {}
function MinimalGUI:Notify(message, notificationType)
	local colors = Config.Colors.Dark
	local accentColors = Config.Colors.Accent

	local accentColor = colors.Primary
	if notificationType and accentColors[notificationType] then
		accentColor = accentColors[notificationType]
	end

	local notifGui = Instance.new('ScreenGui', CoreGui)
	notifGui.Name = 'MinimalGUI_Notification'
	notifGui.ResetOnSpawn = false
	notifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local frame = Instance.new('Frame')
	frame.Size = UDim2.new(0, 280, 0, 50)
	frame.Position = UDim2.new(0.5, 0, 0, -60)
	frame.AnchorPoint = Vector2.new(0.5, 0)
	frame.BackgroundColor3 = colors.Surface
	frame.Parent = notifGui
	Corner(frame, "md")
	AddGloss(frame)

	local stroke = Instance.new("UIStroke")
	stroke.Color = accentColor
	stroke.Thickness = 1.5
	stroke.Parent = frame

	local label = Instance.new('TextLabel')
	label.Size = UDim2.new(1, -20, 1, 0)
	label.Position = UDim2.new(0.5, 0, 0.5, 0)
	label.AnchorPoint = Vector2.new(0.5, 0.5)
	label.BackgroundTransparency = 1
	label.Text = message
	label.Font = Config.Fonts.Medium
	label.TextSize = 14
	label.TextColor3 = colors.Text
	label.Parent = frame

	table.insert(notificationQueue, frame)

	-- Animate In
	Tween(frame, { Position = UDim2.new(0.5, 0, 0, 20) }):Play()

	-- Handle queue and dismissal
	task.delay(5, function()
		if not frame or not frame.Parent then return end
		local index = table.find(notificationQueue, frame)
		if index then
			table.remove(notificationQueue, index)
		end
		
		Tween(frame, { Position = UDim2.new(0.5, 0, 0, -60) }):Play()
		task.wait(Config.Animation.Medium)
		notifGui:Destroy()
	end)
end

--[[ CORE GUI ]]--
function MinimalGUI:CreateWindow(title, size)
	title = title or 'MinimalGUI'
	size = size or UDim2.new(0, Config.Layout.MaxWidth, 0, Config.Layout.MaxHeight)

	local window = {
		Pages = {},
		CurrentPage = nil,
		_connections = {},
		_isDarkTheme = true, -- Default to dark theme
	}

	self.CurrentWindow = window
	
	function window:getColors()
		local theme = self._isDarkTheme and Config.Colors.Dark or Config.Colors.Light
		return theme, Config.Colors.Accent
	end

	local gui = Instance.new('ScreenGui', CoreGui)
	gui.Name = 'MinimalGUI'
	gui.ResetOnSpawn = false
	gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local main = Instance.new('Frame')
	main.Size = UDim2.new(0, 0, 0, 0)
	main.Position = UDim2.new(0.5, 0, 0.5, 0)
	main.AnchorPoint = Vector2.new(0.5, 0.5)
	main.BackgroundColor3 = window:getColors().Background
	main.ClipsDescendants = true
	main.Parent = gui
	Corner(main, 'xl')
	AddGloss(main)
	
	local mainStroke = Instance.new('UIStroke', main)
	mainStroke.Color = window:getColors().Border
	mainStroke.Thickness = 1
	
	-- Header
	local header = Instance.new('Frame', main)
	header.Size = UDim2.new(1, 0, 0, 50)
	header.BackgroundTransparency = 1
	
	local titleText = Instance.new('TextLabel', header)
	titleText.Size = UDim2.new(1, -100, 1, 0)
	titleText.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 0)
	titleText.BackgroundTransparency = 1
	titleText.Font = Config.Fonts.Bold
	titleText.TextSize = 16
	titleText.TextColor3 = window:getColors().Text
	titleText.Text = title
	titleText.TextXAlignment = Enum.TextXAlignment.Left

	-- Header Buttons (Theme, Close)
	local buttonContainer = Instance.new('Frame', header)
	buttonContainer.Size = UDim2.new(0, 60, 1, -20)
	buttonContainer.Position = UDim2.new(1, -Config.Layout.EdgePadding, 0.5, 0)
	buttonContainer.AnchorPoint = Vector2.new(1, 0.5)
	buttonContainer.BackgroundTransparency = 1
	local buttonLayout = Instance.new('UIListLayout', buttonContainer)
	buttonLayout.FillDirection = Enum.FillDirection.Horizontal
	buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
	buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
	buttonLayout.Padding = UDim.new(0, 8)
	
	local themeBtn = Instance.new('TextButton', buttonContainer)
	themeBtn.Size = UDim2.new(0, 25, 0, 25)
	themeBtn.Text = 'ðŸŒ™'
	themeBtn.Font = Config.Fonts.Bold
	themeBtn.TextSize = 14
	Corner(themeBtn, 'sm')
	
	local closeBtn = Instance.new('TextButton', buttonContainer)
	closeBtn.Size = UDim2.new(0, 25, 0, 25)
	closeBtn.Text = 'Ã—'
	closeBtn.Font = Config.Fonts.Bold
	closeBtn.TextSize = 20
	Corner(closeBtn, 'sm')

	-- Tabs Container
	local tabContainer = Instance.new('Frame', main)
	tabContainer.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 0, 30)
	tabContainer.Position = UDim2.new(0.5, 0, 0, 50)
	tabContainer.AnchorPoint = Vector2.new(0.5, 0)
	tabContainer.BackgroundTransparency = 1
	local tabLayout = Instance.new('UIListLayout', tabContainer)
	tabLayout.FillDirection = Enum.FillDirection.Horizontal
	tabLayout.Padding = UDim.new(0, Config.Spacing.sm)
	
	-- Content Area
	local content = Instance.new('Frame', main)
	content.Size = UDim2.new(1, 0, 1, -95)
	content.Position = UDim2.new(0, 0, 1, 0)
	content.AnchorPoint = Vector2.new(0, 1)
	content.BackgroundTransparency = 1
	
	-- Updates all colors based on the current theme.
	local function updateTheme()
		local colors, _ = window:getColors()
		Tween(main, { BackgroundColor3 = colors.Background }):Play()
		mainStroke.Color = colors.Border
		titleText.TextColor3 = colors.Text
		
		for _, btn in ipairs({ themeBtn, closeBtn }) do
			btn.BackgroundColor3 = colors.Surface2
			btn.TextColor3 = colors.TextMuted
		end
		
		for _, page in pairs(window.Pages) do
			if page._button then
				if window.CurrentPage == page then
					page._button.BackgroundColor3 = colors.Primary
					page._button.TextColor3 = Color3.new(1, 1, 1)
				else
					page._button.BackgroundColor3 = colors.Surface2
					page._button.TextColor3 = colors.TextSecondary
				end
			end
		end
	end
	
	themeBtn.MouseButton1Click:Connect(function()
		window._isDarkTheme = not window._isDarkTheme
		themeBtn.Text = window._isDarkTheme and 'ðŸŒ™' or 'â˜€'
		updateTheme()
	end)
	
	closeBtn.MouseButton1Click:Connect(function()
		local tween = Tween(main, { Size = UDim2.fromOffset(0,0), Transparency = 1 })
		tween:Play()
		tween.Completed:Wait()
		gui:Destroy()
	end)

	-- Drag functionality
	do
		local dragging = false
		local startPos, frameStart
		header.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = true
				startPos = input.Position
				frameStart = main.Position
			end
		end)
		table.insert(window._connections, UserInputService.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
				local delta = input.Position - startPos
				main.Position = UDim2.new(frameStart.X.Scale, frameStart.X.Offset + delta.X, frameStart.Y.Scale, frameStart.Y.Offset + delta.Y)
			end
		end))
		table.insert(window._connections, UserInputService.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = false
			end
		end))
	end

	function window:CreatePage(name)
		local page = { Name = name, Elements = {}, _frame = nil, _button = nil }

		local tabBtn = Instance.new('TextButton', tabContainer)
		tabBtn.Size = UDim2.new(0, 0, 1, 0)
		tabBtn.AutomaticSize = Enum.AutomaticSize.X
		tabBtn.Text = '  ' .. name .. '  '
		tabBtn.Font = Config.Fonts.Medium
		tabBtn.TextSize = 13
		Corner(tabBtn, 'md')
		
		local pageFrame = Instance.new('ScrollingFrame', content)
		pageFrame.Size = UDim2.new(1, 0, 1, 0)
		pageFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
		pageFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		pageFrame.BackgroundTransparency = 1
		pageFrame.BorderSizePixel = 0
		pageFrame.ScrollBarThickness = 5
		pageFrame.Visible = false
		
		local pageLayout = Instance.new('UIListLayout', pageFrame)
		pageLayout.Padding = UDim.new(0, Config.Layout.RowSpacing)
		pageLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		local pagePadding = Instance.new('UIPadding', pageFrame)
		pagePadding.PaddingLeft = UDim.new(0, Config.Layout.EdgePadding)
		pagePadding.PaddingRight = UDim.new(0, Config.Layout.EdgePadding)
		pagePadding.PaddingTop = UDim.new(0, 10)
		pagePadding.PaddingBottom = UDim.new(0, Config.Layout.EdgePadding)

		pageLayout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
			pageFrame.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + Config.Layout.EdgePadding)
		end)

		local function SetPage(targetPage)
			if window.CurrentPage then
				window.CurrentPage._frame.Visible = false
				local oldButton = window.CurrentPage._button
				Tween(oldButton, { 
					BackgroundColor3 = window:getColors().Surface2, 
					TextColor3 = window:getColors().TextSecondary 
				}):Play()
			end

			targetPage._frame.Visible = true
			Tween(targetPage._button, { 
				BackgroundColor3 = window:getColors().Primary, 
				TextColor3 = Color3.new(1,1,1)
			}):Play()
			
			window.CurrentPage = targetPage
		end

		tabBtn.MouseButton1Click:Connect(function() SetPage(page) end)
		
		page._button = tabBtn
		page._frame = pageFrame
		
		-- Create a generic element container with common styling
		local function CreateElementContainer(height)
			local colors = window:getColors()
			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, height or Config.Layout.RowHeight)
			container.BackgroundColor3 = colors.Surface
			container.Parent = pageFrame
			Corner(container, 'md')
			AddGloss(container)
			
			local stroke = Instance.new("UIStroke", container)
			stroke.Color = colors.Border
			stroke.Thickness = 1
			
			table.insert(page.Elements, container)
			return container
		end
		
		function page:CreateButton(text, callback)
			local colors = window:getColors()
			local container = CreateElementContainer()
			container.BackgroundColor3 = colors.Primary
			container:FindFirstChildOfClass("UIStroke"):Destroy()

			local btn = Instance.new('TextButton', container)
			btn.Size = UDim2.new(1,0,1,0)
			btn.BackgroundTransparency = 1
			btn.Text = text
			btn.TextColor3 = Color3.new(1,1,1)
			btn.Font = Config.Fonts.Medium
			btn.TextSize = 14
			
			btn.MouseButton1Click:Connect(function()
				local originalColor = container.BackgroundColor3
				Tween(container, { BackgroundColor3 = colors.PrimaryHover }):Play()
				task.wait(Config.Animation.Fast)
				Tween(container, { BackgroundColor3 = originalColor }):Play()
				if callback then task.spawn(callback) end
			end)
			return container
		end

		function page:CreateToggle(text, defaultValue, callback)
			local value = defaultValue or false
			local container = CreateElementContainer()
			
			local label = Instance.new('TextLabel', container)
			label.Size = UDim2.new(1, -70, 1, 0)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
			label.BackgroundTransparency = 1
			label.Font = Config.Fonts.Regular
			label.TextSize = 14
			label.Text = text
			label.TextXAlignment = Enum.TextXAlignment.Left

			local switch = Instance.new('TextButton', container)
			switch.Size = UDim2.new(0, 42, 0, 24)
			switch.Position = UDim2.new(1, -Config.Spacing.lg - 42, 0.5, -12)
			switch.Text = ""
			Corner(switch, 'xl')

			local thumb = Instance.new('Frame', switch)
			thumb.Size = UDim2.new(0, 18, 0, 18)
			thumb.BackgroundColor3 = Color3.new(1,1,1)
			thumb.Position = UDim2.new(0, 3, 0.5, -9)
			Corner(thumb, 'xl')
			
			local function updateVisuals()
				local colors = window:getColors()
				label.TextColor3 = colors.Text
				local targetColor = value and colors.Primary or colors.Surface3
				local thumbPos = value and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9)
				Tween(switch, { BackgroundColor3 = targetColor }):Play()
				Tween(thumb, { Position = thumbPos }):Play()
			end

			switch.MouseButton1Click:Connect(function()
				value = not value
				updateVisuals()
				if callback then task.spawn(callback, value) end
			end)
			
			task.spawn(updateVisuals)
			return container, function() return value end
		end
		
		function page:CreateSlider(text, min, max, defaultValue, callback)
			min, max = min or 0, max or 100
			local value = defaultValue or min
			
			local container = CreateElementContainer(Config.Layout.RowHeight + 20)
			
			local label = Instance.new('TextLabel', container)
			label.Size = UDim2.new(0.7, 0, 0, 20)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 8)
			label.BackgroundTransparency = 1
			label.Font = Config.Fonts.Regular
			label.TextSize = 14
			label.Text = text
			label.TextXAlignment = Enum.TextXAlignment.Left
			
			local valueLabel = Instance.new('TextLabel', container)
			valueLabel.Size = UDim2.new(0.3, -Config.Spacing.lg * 2, 0, 20)
			valueLabel.Position = UDim2.new(1, -Config.Spacing.lg, 0, 8)
			valueLabel.AnchorPoint = Vector2.new(1,0)
			valueLabel.BackgroundTransparency = 1
			valueLabel.Font = Config.Fonts.Medium
			valueLabel.TextSize = 13
			valueLabel.TextXAlignment = Enum.TextXAlignment.Right
			
			local track = Instance.new('Frame', container)
			track.Size = UDim2.new(1, -Config.Spacing.lg*2, 0, 6)
			track.Position = UDim2.new(0.5, 0, 1, -20)
			track.AnchorPoint = Vector2.new(0.5, 0)
			Corner(track, 'xl')
			
			local fill = Instance.new('Frame', track)
			fill.Size = UDim2.new(0,0,1,0)
			fill.BackgroundColor3 = window:getColors().Primary
			Corner(fill, 'xl')
			
			local inputBtn = Instance.new('TextButton', track)
			inputBtn.Size = UDim2.new(1,0,1,0)
			inputBtn.BackgroundTransparency = 1
			inputBtn.Text = ""

			local isDragging = false
			local function updateSlider(inputX)
				local colors = window:getColors()
				local percent = math.clamp((inputX - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
				value = math.floor(min + (max - min) * percent + 0.5)
				fill.Size = UDim2.new(percent, 0, 1, 0)
				valueLabel.Text = tostring(value)
				valueLabel.TextColor3 = colors.Primary
				if callback then task.spawn(callback, value) end
			end
			
			task.spawn(function()
				local colors = window:getColors()
				label.TextColor3 = colors.Text
				track.BackgroundColor3 = colors.Surface3
				updateSlider(track.AbsolutePosition.X + track.AbsoluteSize.X * ((value-min)/(max-min)))
			end)
			
			inputBtn.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDragging = true
					updateSlider(input.Position.X)
				end
			end)
			inputBtn.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDragging = false
				end
			end)
			table.insert(window._connections, UserInputService.InputChanged:Connect(function(input)
				if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					updateSlider(input.Position.X)
				end
			end))

			return container, function() return value end
		end
		
		function page:CreateDropdown(text, options, defaultValue, callback)
			options = options or {}
			local value = defaultValue or options[1]
			local isOpen = false

			local container = CreateElementContainer()
			container.ClipsDescendants = true
			
			local dropdownHeight = Config.Layout.RowHeight
			local optionHeight = 30
			
			local label = Instance.new('TextLabel', container)
			label.Size = UDim2.new(0.4, 0, 1, 0)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
			label.BackgroundTransparency = 1
			label.Font = Config.Fonts.Regular
			label.TextSize = 14
			label.Text = text
			label.TextXAlignment = Enum.TextXAlignment.Left
			
			local dropdownBtn = Instance.new('TextButton', container)
			dropdownBtn.Size = UDim2.new(0.6, -Config.Spacing.lg, 1, -12)
			dropdownBtn.Position = UDim2.new(1, -Config.Spacing.lg, 0.5, 0)
			dropdownBtn.AnchorPoint = Vector2.new(1, 0.5)
			dropdownBtn.Text = ""
			Corner(dropdownBtn, 'sm')
			
			local valueText = Instance.new('TextLabel', dropdownBtn)
			valueText.Size = UDim2.new(1, -25, 1, 0)
			valueText.Position = UDim2.new(0, 10, 0, 0)
			valueText.BackgroundTransparency = 1
			valueText.Font = Config.Fonts.Regular
			valueText.TextSize = 13
			valueText.Text = tostring(value or "")
			valueText.TextXAlignment = Enum.TextXAlignment.Left
			
			local arrow = Instance.new('TextLabel', dropdownBtn)
			arrow.Size = UDim2.new(0, 20, 1, 0)
			arrow.Position = UDim2.new(1, -20, 0, 0)
			arrow.BackgroundTransparency = 1
			arrow.Text = 'â–¼'
			arrow.Font = Config.Fonts.Bold
			arrow.TextSize = 10
			
			local optionsList = Instance.new('ScrollingFrame', container)
			optionsList.Size = UDim2.new(0.6, -Config.Spacing.lg, 0, 0)
			optionsList.Position = UDim2.new(1, -Config.Spacing.lg, 1, 5)
			optionsList.AnchorPoint = Vector2.new(1, 0)
			optionsList.BorderSizePixel = 0
			optionsList.BackgroundTransparency = 1
			optionsList.ZIndex = 2
			optionsList.ScrollBarThickness = 4
			
			local listLayout = Instance.new('UIListLayout', optionsList)
			listLayout.Padding = UDim.new(0, 4)
			
			task.spawn(function()
				local colors = window:getColors()
				label.TextColor3 = colors.Text
				dropdownBtn.BackgroundColor3 = colors.Surface2
				valueText.TextColor3 = colors.TextSecondary
				arrow.TextColor3 = colors.TextMuted
				optionsList.ScrollBarImageColor3 = colors.Primary
			end)

			for _, optionText in ipairs(options) do
				local optionBtn = Instance.new('TextButton', optionsList)
				optionBtn.Size = UDim2.new(1, 0, 0, optionHeight)
				optionBtn.BackgroundColor3 = window:getColors().Surface2
				optionBtn.Text = ""
				Corner(optionBtn, 'sm')
				
				local optLabel = Instance.new('TextLabel', optionBtn)
				optLabel.Size = UDim2.new(1, -20, 1, 0)
				optLabel.Position = UDim2.new(0, 10, 0, 0)
				optLabel.BackgroundTransparency = 1
				optLabel.Font = Config.Fonts.Regular
				optLabel.Text = tostring(optionText)
				optLabel.TextSize = 13
				optLabel.TextColor3 = window:getColors().TextSecondary
				optLabel.TextXAlignment = Enum.TextXAlignment.Left
				
				optionBtn.MouseButton1Click:Connect(function()
					value = optionText
					valueText.Text = tostring(value)
					if callback then task.spawn(callback, value) end
				end)
			end
			
			dropdownBtn.MouseButton1Click:Connect(function()
				isOpen = not isOpen
				container.ClipsDescendants = false
				pageFrame.ClipsDescendants = false

				local maxListHeight = math.min(#options * (optionHeight + listLayout.Padding.Offset), 150)
				local targetContainerHeight = isOpen and dropdownHeight + maxListHeight + 10 or dropdownHeight
				local targetListHeight = isOpen and maxListHeight or 0
				
				Tween(container, { Size = UDim2.new(1, 0, 0, targetContainerHeight) }):Play()
				Tween(optionsList, { Size = UDim2.new(optionsList.Size.X.Scale, optionsList.Size.X.Offset, 0, targetListHeight) }):Play()
				Tween(arrow, { Rotation = isOpen and -180 or 0 }):Play()
				
				if not isOpen then
					task.wait(Config.Animation.Medium)
					container.ClipsDescendants = true
					pageFrame.ClipsDescendants = true
				end
			end)
			
			return container, function() return value end
		end

		window.Pages[name] = page

		-- First page created becomes the default.
		if not window.CurrentPage then
			SetPage(page)
		end
		
		task.spawn(updateTheme)
		return page
	end

	function window:Destroy()
		for _, conn in ipairs(self._connections) do conn:Disconnect() end
		gui:Destroy()
	end

	-- Initial open animation
	Tween(main, { Size = size }):Play()
	updateTheme()

	return window
end

--[[ CLEANUP FUNCTION ]]--
function MinimalGUI:DestroyAll()
	if typeof(self.CurrentWindow) == 'table' and self.CurrentWindow.Destroy then
		pcall(self.CurrentWindow.Destroy, self.CurrentWindow)
	end
	for _, frame in ipairs(notificationQueue) do
		if frame and frame.Parent then
			frame.Parent:Destroy()
		end
	end
	notificationQueue = {}
	self.CurrentWindow = nil
	-- Clear the module itself for clean re-injection
	for k in pairs(self) do self[k] = nil end
	setmetatable(self, nil)
end


if getgenv then
	getgenv().MinimalGUI = MinimalGUI
	getgenv().MinimalGUI_Instance = MinimalGUI
end

return MinimalGUI
