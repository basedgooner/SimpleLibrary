local MinimalGUI = {}
local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')

if getgenv then
	local existingGUI = getgenv().MinimalGUI_Instance
	if existingGUI and typeof(existingGUI.DestroyAll) == "function" then
		pcall(function() existingGUI:DestroyAll() end)
	end
end

local Config = {
	Colors = {
		Light = {
			Background = Color3.fromRGB(248, 249, 251),
			Surface = Color3.fromRGB(255, 255, 255),
			Surface2 = Color3.fromRGB(241, 245, 249),
			Surface3 = Color3.fromRGB(226, 232, 240),
			Primary = Color3.fromRGB(79, 70, 229),
			PrimaryHover = Color3.fromRGB(99, 102, 241),
			PrimaryDim = Color3.fromRGB(67, 56, 202),
			Text = Color3.fromRGB(15, 23, 42),
			TextSecondary = Color3.fromRGB(51, 65, 85),
			TextMuted = Color3.fromRGB(100, 116, 139),
			Success = Color3.fromRGB(22, 163, 74),
			Danger = Color3.fromRGB(220, 38, 38),
			Warning = Color3.fromRGB(245, 158, 11),
			Border = Color3.fromRGB(226, 232, 240),
			BorderLight = Color3.fromRGB(203, 213, 225),
			Accent = Color3.fromRGB(124, 58, 237),
		},
		Dark = {
			Background = Color3.fromRGB(17, 24, 39),
			Surface = Color3.fromRGB(31, 41, 55),
			Surface2 = Color3.fromRGB(55, 65, 81),
			Surface3 = Color3.fromRGB(75, 85, 99),
			Primary = Color3.fromRGB(99, 102, 241),
			PrimaryHover = Color3.fromRGB(129, 140, 248),
			PrimaryDim = Color3.fromRGB(79, 70, 229),
			Text = Color3.fromRGB(243, 244, 246),
			TextSecondary = Color3.fromRGB(209, 213, 219),
			TextMuted = Color3.fromRGB(156, 163, 175),
			Success = Color3.fromRGB(34, 197, 94),
			Danger = Color3.fromRGB(239, 68, 68),
			Warning = Color3.fromRGB(251, 191, 36),
			Border = Color3.fromRGB(55, 65, 81),
			BorderLight = Color3.fromRGB(75, 85, 99),
			Accent = Color3.fromRGB(139, 92, 246),
		},
	},
	Fonts = {
		Regular = Enum.Font.Gotham,
		Medium = Enum.Font.GothamMedium,
		Bold = Enum.Font.GothamBold,
	},
	Spacing = { xs = 4, sm = 8, md = 12, lg = 16, xl = 24 },
	Radius = { sm = 8, md = 12, lg = 16, xl = 24 },
	Animation = { Fast = 0.15, Medium = 0.25, Slow = 0.4 },
	Layout = {
		RowHeight = 40,
		RowSpacing = 10,
		EdgePadding = 16,
		MaxWidth = 580,
		MaxHeight = 420,
	},
}

local function Tween(object, properties, duration, style)
	return TweenService:Create(
		object,
		TweenInfo.new(
			duration or Config.Animation.Medium,
			style or Enum.EasingStyle.Sine,
			Enum.EasingDirection.Out
		),
		properties
	)
end

local function Corner(parent, radius)
	local corner = Instance.new('UICorner')
	corner.CornerRadius = UDim.new(0, radius or Config.Radius.lg)
	corner.Parent = parent
	return corner
end

local function Stroke(parent, color, thickness)
	local stroke = Instance.new('UIStroke')
	stroke.Color = color or Color3.new(1, 1, 1)
	stroke.Thickness = thickness or 1
	stroke.Transparency = 0
	stroke.Parent = parent
	return stroke
end

local function AddGloss(parent, rotation)
	local gloss = Instance.new("UIGradient")
	gloss.Rotation = rotation or -45
	gloss.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromHex("FFFFFF")),
		ColorSequenceKeypoint.new(0.4, Color3.fromHex("FFFFFF")),
		ColorSequenceKeypoint.new(1, Color3.fromHex("FFFFFF"))
	})
	gloss.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0.9),
		NumberSequenceKeypoint.new(0.4, 0.95),
		NumberSequenceKeypoint.new(1, 0.9)
	})
	gloss.Parent = parent
	return gloss
end


local notificationQueue = {}

local function createNotification(message, notificationType)
	local notifGui = Instance.new('ScreenGui')
	notifGui.Name = 'MinimalGUI_Notifications'
	notifGui.Parent = CoreGui
	notifGui.ResetOnSpawn = false

	local colors = Config.Colors.Dark
	local bgColor = colors.Surface
	local textColor = colors.Text
	local accentColor = colors.Primary
	local iconText = "â„¹"

	if notificationType == 'success' then
		accentColor = colors.Success
		iconText = "âœ“"
	elseif notificationType == 'danger' then
		accentColor = colors.Danger
		iconText = "âœ•"
	elseif notificationType == 'warning' then
		accentColor = colors.Warning
		iconText = "âš "
	end

	local notification = Instance.new('Frame')
	notification.Size = UDim2.new(0, 320, 0, 60)
	notification.Position = UDim2.new(1, 340, 1, -80 - (#notificationQueue * 70))
	notification.BackgroundColor3 = bgColor
	notification.BorderSizePixel = 0
	notification.Parent = notifGui
	Corner(notification, Config.Radius.md)
	AddGloss(notification)

	local border = Instance.new('UIStroke')
	border.Color = colors.BorderLight
	border.Thickness = 1.5
	border.Parent = notification

	local iconLabel = Instance.new('TextLabel')
	iconLabel.Size = UDim2.new(0, 40, 0, 40)
	iconLabel.Position = UDim2.new(0, 10, 0.5, -20)
	iconLabel.BackgroundTransparency = 1
	iconLabel.Text = iconText
	iconLabel.TextColor3 = accentColor
	iconLabel.Font = Config.Fonts.Bold
	iconLabel.TextSize = 24
	iconLabel.Parent = notification

	local text = Instance.new('TextLabel')
	text.Size = UDim2.new(1, -60, 1, 0)
	text.Position = UDim2.new(0, 50, 0, 0)
	text.BackgroundTransparency = 1
	text.Text = message
	text.TextColor3 = textColor
	text.TextSize = 14
	text.Font = Config.Fonts.Medium
	text.TextXAlignment = Enum.TextXAlignment.Left
	text.TextWrapped = true
	text.Parent = notification

	local closeBtn = Instance.new('TextButton')
	closeBtn.Size = UDim2.new(0, 20, 0, 20)
	closeBtn.Position = UDim2.new(1, -25, 0, 5)
	closeBtn.BackgroundTransparency = 1
	closeBtn.Text = "Ã—"
	closeBtn.TextColor3 = colors.TextMuted
	closeBtn.TextSize = 20
	closeBtn.Font = Config.Fonts.Bold
	closeBtn.Parent = notification

	table.insert(notificationQueue, 1, {notification = notification, gui = notifGui})

	for i, item in ipairs(notificationQueue) do
		Tween(item.notification, { Position = UDim2.new(1, -340, 1, -80 - ((i-1) * 70)) }, Config.Animation.Medium):Play()
	end

	local function dismissNotification()
		for i, item in ipairs(notificationQueue) do
			if item.notification == notification then
				table.remove(notificationQueue, i)
				break
			end
		end

		Tween(notification, { Position = UDim2.new(1, 340, notification.Position.Y.Scale, notification.Position.Y.Offset) }, Config.Animation.Medium):Play()
		task.wait(Config.Animation.Medium)
		notifGui:Destroy()

		for i, item in ipairs(notificationQueue) do
			Tween(item.notification, { Position = UDim2.new(1, -340, 1, -80 - ((i-1) * 70)) }, Config.Animation.Medium):Play()
		end
	end

	closeBtn.MouseButton1Click:Connect(dismissNotification)
	task.delay(5, dismissNotification)
end


function MinimalGUI:CreateWindow(title, size)
	title = title or 'MinimalGUI'
	size = size or UDim2.new(0, Config.Layout.MaxWidth, 0, Config.Layout.MaxHeight)

	local window = {
		Pages = {},
		CurrentPage = nil,
		_connections = {},
		_isDarkTheme = true,
	}

	self.CurrentWindow = window

	function window:getColors()
		return self._isDarkTheme and Config.Colors.Dark or Config.Colors.Light
	end

	function window:Notify(message, notificationType)
		task.spawn(createNotification, message, notificationType or 'info')
	end

	local gui = Instance.new('ScreenGui')
	gui.Name = 'MinimalGUI'
	gui.Parent = CoreGui
	gui.ResetOnSpawn = false
	gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local main = Instance.new('Frame')
	main.Size = size
	main.Position = UDim2.new(0.5, 0, 0.5, 0)
	main.AnchorPoint = Vector2.new(0.5, 0.5)
	main.BackgroundColor3 = window:getColors().Background
	main.BorderSizePixel = 0
	main.Parent = gui
	Corner(main, Config.Radius.xl)
	Stroke(main, window:getColors().Border, 2)
	AddGloss(main, 0)

	local header = Instance.new('Frame')
	header.Size = UDim2.new(1, 0, 0, 50)
	header.BackgroundColor3 = window:getColors().Surface
	header.BorderSizePixel = 0
	header.Parent = main
	Corner(header, Config.Radius.xl)
	AddGloss(header)

	local titleText = Instance.new('TextLabel')
	titleText.Size = UDim2.new(1, -120, 1, 0)
	titleText.Position = UDim2.new(0, 20, 0, 0)
	titleText.BackgroundTransparency = 1
	titleText.Text = title
	titleText.TextColor3 = window:getColors().Text
	titleText.Font = Config.Fonts.Bold
	titleText.TextSize = 18
	titleText.TextXAlignment = Enum.TextXAlignment.Left
	titleText.Parent = header

	local buttonContainer = Instance.new("Frame")
	buttonContainer.Size = UDim2.new(0, 80, 1, -20)
	buttonContainer.Position = UDim2.new(1, -90, 0.5, 0)
	buttonContainer.AnchorPoint = Vector2.new(0, 0.5)
	buttonContainer.BackgroundTransparency = 1
	buttonContainer.Parent = header
	local buttonLayout = Instance.new("UIListLayout")
	buttonLayout.FillDirection = Enum.FillDirection.Horizontal
	buttonLayout.Padding = UDim.new(0, 10)
	buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	buttonLayout.Parent = buttonContainer


	local themeBtn = Instance.new('TextButton')
	themeBtn.Size = UDim2.new(0, 30, 0, 30)
	themeBtn.BackgroundColor3 = window:getColors().Surface2
	themeBtn.BorderSizePixel = 0
	themeBtn.Text = 'ðŸŒ™'
	themeBtn.TextColor3 = window:getColors().TextMuted
	themeBtn.TextSize = 16
	themeBtn.Font = Config.Fonts.Bold
	themeBtn.Parent = buttonContainer
	Corner(themeBtn, Config.Radius.md)
	AddGloss(themeBtn)

	local closeBtn = Instance.new('TextButton')
	closeBtn.Size = UDim2.new(0, 30, 0, 30)
	closeBtn.BackgroundColor3 = window:getColors().Surface2
	closeBtn.BorderSizePixel = 0
	closeBtn.Text = 'Ã—'
	closeBtn.TextColor3 = window:getColors().TextMuted
	closeBtn.TextSize = 22
	closeBtn.Font = Config.Fonts.Bold
	closeBtn.Parent = buttonContainer
	Corner(closeBtn, Config.Radius.md)
	AddGloss(closeBtn)

	local tabContainer = Instance.new('Frame')
	tabContainer.Size = UDim2.new(1, -40, 0, 35)
	tabContainer.Position = UDim2.new(0.5, 0, 0, 60)
	tabContainer.AnchorPoint = Vector2.new(0.5, 0)
	tabContainer.BackgroundTransparency = 1
	tabContainer.Parent = main

	local tabLayout = Instance.new('UIListLayout')
	tabLayout.FillDirection = Enum.FillDirection.Horizontal
	tabLayout.Padding = UDim.new(0, 10)
	tabLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	tabLayout.Parent = tabContainer

	local content = Instance.new('Frame')
	content.Size = UDim2.new(1, -40, 1, -115)
	content.Position = UDim2.new(0.5, 0, 1, -20)
	content.AnchorPoint = Vector2.new(0.5, 1)
	content.BackgroundTransparency = 1
	content.Parent = main

	local function updateTheme()
		local colors = window:getColors()
		Tween(main, { BackgroundColor3 = colors.Background }, Config.Animation.Fast):Play()
		Tween(header, { BackgroundColor3 = colors.Surface }, Config.Animation.Fast):Play()
		titleText.TextColor3 = colors.Text
		themeBtn.BackgroundColor3 = colors.Surface2
		themeBtn.TextColor3 = colors.TextMuted
		closeBtn.BackgroundColor3 = colors.Surface2
		closeBtn.TextColor3 = colors.TextMuted
		main:FindFirstChild("UIStroke").Color = colors.Border

		for _, page in pairs(window.Pages) do
			if page._button then
				local isCurrent = window.CurrentPage == page
				Tween(page._button, {
					BackgroundColor3 = isCurrent and colors.Primary or colors.Surface2,
					TextColor3 = isCurrent and Color3.new(1, 1, 1) or colors.TextSecondary,
				}, Config.Animation.Fast):Play()
			end
		end
	end

	themeBtn.MouseButton1Click:Connect(function()
		window._isDarkTheme = not window._isDarkTheme
		themeBtn.Text = window._isDarkTheme and 'ðŸŒ™' or 'â˜€'
		updateTheme()
	end)

	closeBtn.MouseButton1Click:Connect(function()
		Tween(main, { Size = UDim2.new(), Position = UDim2.new(0.5, 0, 0.5, 0) }, Config.Animation.Slow):Play()
		Tween(main, { Transparency = 1 }, Config.Animation.Slow):Play()
		task.wait(Config.Animation.Slow)
		gui:Destroy()
	end)

	local dragInput
	header.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	header.InputEnded:Connect(function(input)
		if input == dragInput then
			dragInput = nil
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput then
			local delta = input.Position - dragInput.Position
			main.Position = main.Position + UDim2.new(0, delta.X, 0, delta.Y)
		end
	end)

	function window:CreatePage(name)
		local page = { Name = name, Elements = {}, _frame = nil, _button = nil }

		local tabBtn = Instance.new('TextButton')
		tabBtn.Size = UDim2.new(0, 0, 1, 0)
		tabBtn.AutomaticSize = Enum.AutomaticSize.X
		tabBtn.BackgroundColor3 = window:getColors().Surface2
		tabBtn.BorderSizePixel = 0
		tabBtn.Text = name
		tabBtn.TextColor3 = window:getColors().TextSecondary
		tabBtn.Font = Config.Fonts.Medium
		tabBtn.TextSize = 14
		tabBtn.Parent = tabContainer
		Corner(tabBtn, Config.Radius.md)
		local pad = Instance.new("UIPadding")
		pad.PaddingLeft = UDim.new(0, 15)
		pad.PaddingRight = UDim.new(0, 15)
		pad.Parent = tabBtn


		local pageFrame = Instance.new('ScrollingFrame')
		pageFrame.Size = UDim2.new(1, 0, 1, 0)
		pageFrame.BackgroundTransparency = 1
		pageFrame.BorderSizePixel = 0
		pageFrame.ScrollBarThickness = 6
		pageFrame.ScrollBarImageColor3 = window:getColors().Primary
		pageFrame.Visible = false
		pageFrame.Parent = content

		local pageLayout = Instance.new('UIListLayout')
		pageLayout.Padding = UDim.new(0, Config.Layout.RowSpacing)
		pageLayout.Parent = pageFrame
		local pagePadding = Instance.new("UIPadding")
		pagePadding.PaddingTop = UDim.new(0, 10)
		pagePadding.Parent = pageFrame


		pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			pageFrame.CanvasSize = UDim2.new(0,0,0, pageLayout.AbsoluteContentSize.Y + 20)
		end)


		tabBtn.MouseButton1Click:Connect(function()
			if window.CurrentPage == page then return end
			if window.CurrentPage and window.CurrentPage._button then
				Tween(window.CurrentPage._button, {
					BackgroundColor3 = window:getColors().Surface2,
					TextColor3 = window:getColors().TextSecondary,
				}, Config.Animation.Fast):Play()
				window.CurrentPage._frame.Visible = false
			end
			pageFrame.Visible = true
			Tween(tabBtn, {
				BackgroundColor3 = window:getColors().Primary,
				TextColor3 = Color3.new(1,1,1),
			}, Config.Animation.Fast):Play()
			window.CurrentPage = page
		end)

		page._button = tabBtn
		page._frame = pageFrame

		function page:CreateButton(text, callback)
			local btn = Instance.new('TextButton')
			btn.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			btn.BackgroundColor3 = window:getColors().Primary
			btn.BorderSizePixel = 0
			btn.Text = text
			btn.TextColor3 = Color3.new(1,1,1)
			btn.Font = Config.Fonts.Medium
			btn.TextSize = 14
			btn.Parent = pageFrame
			Corner(btn, Config.Radius.md)
			AddGloss(btn)

			btn.MouseButton1Click:Connect(function()
				if callback then pcall(callback) end
			end)

			table.insert(page.Elements, btn)
			return btn
		end

		function page:CreateToggle(text, defaultValue, callback)
			local value = defaultValue or false

			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundColor3 = window:getColors().Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			Corner(container, Config.Radius.md)
			Stroke(container, window:getColors().Border)
			AddGloss(container)

			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(1, -70, 1, 0)
			label.Position = UDim2.new(0, Config.Spacing.lg, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = window:getColors().Text
			label.TextSize = 14
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = container

			local toggleSwitch = Instance.new("Frame")
			toggleSwitch.Size = UDim2.new(0, 44, 0, 24)
			toggleSwitch.Position = UDim2.new(1, -54, 0.5, -12)
			toggleSwitch.BackgroundColor3 = value and window:getColors().Primary or window:getColors().Surface3
			toggleSwitch.Parent = container
			Corner(toggleSwitch, 12)

			local thumb = Instance.new("Frame")
			thumb.Size = UDim2.new(0, 20, 0, 20)
			thumb.Position = value and UDim2.new(1,-22,0.5,-10) or UDim2.new(0,2,0.5,-10)
			thumb.BackgroundColor3 = Color3.new(1,1,1)
			thumb.Parent = toggleSwitch
			Corner(thumb, 10)

			local toggleButton = Instance.new("TextButton")
			toggleButton.Size = UDim2.new(1,0,1,0)
			toggleButton.BackgroundTransparency = 1
			toggleButton.Text = ""
			toggleButton.Parent = toggleSwitch

			toggleButton.MouseButton1Click:Connect(function()
				value = not value
				Tween(toggleSwitch, {BackgroundColor3 = value and window:getColors().Primary or window:getColors().Surface3}, Config.Animation.Fast):Play()
				Tween(thumb, {Position = value and UDim2.new(1,-22,0.5,-10) or UDim2.new(0,2,0.5,-10)}, Config.Animation.Fast):Play()
				if callback then pcall(callback, value) end
			end)


			table.insert(page.Elements, container)
			return container, function() return value end
		end

		window.Pages[name] = page

		if not window.CurrentPage then
			tabBtn:MouseButton1Click()
		end

		return page
	end

	function window:Destroy()
		for _, connection in pairs(window._connections) do
			connection:Disconnect()
		end
		gui:Destroy()
	end

	main.Size = UDim2.new()
	main.Transparency = 1
	Tween(main, {Size = size, Transparency = 0}, Config.Animation.Slow, Enum.EasingStyle.Quint):Play()


	return window
end

if getgenv then
	getgenv().MinimalGUI_Instance = MinimalGUI
end

function MinimalGUI:DestroyAll()
	if typeof(self.CurrentWindow) == "table" and self.CurrentWindow.Destroy then
		pcall(function() self.CurrentWindow:Destroy() end)
	end

	for _, item in ipairs(notificationQueue) do
		if item.gui then
			pcall(function() item.gui:Destroy() end)
		end
	end

	notificationQueue = {}
	self.CurrentWindow = nil

	setmetatable(self, nil)
	for k in pairs(self) do
		self[k] = nil
	end
end

return MinimalGUI
