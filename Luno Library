Of course. Here is the revamped and improved version of your Luau code.

```lua
--[[
    MinimalGUI Revamped
    Improved by Gemini
    Design: Minimalistic, Smooth, Clean, Reactive
    Animations: Simple, Professional, Non-tacky
]]

local MinimalGUI = {}

--// Services
local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')

--// Cleanup previous instances to prevent overlap
if getgenv then
    local existingGUI = getgenv().MinimalGUI_Instance
    if existingGUI and typeof(existingGUI.DestroyAll) == "function" then
        pcall(function() existingGUI:DestroyAll() end)
    end
end

--// Configuration
local Config = {
    Colors = {
        Light = {
            Background = Color3.fromRGB(248, 249, 251),
            Surface = Color3.fromRGB(255, 255, 255),
            Surface2 = Color3.fromRGB(241, 245, 249),
            Surface3 = Color3.fromRGB(230, 235, 240),
            Primary = Color3.fromRGB(79, 70, 229),
            PrimaryHover = Color3.fromRGB(99, 102, 241),
            PrimaryDim = Color3.fromRGB(67, 56, 202),
            Text = Color3.fromRGB(15, 23, 42),
            TextSecondary = Color3.fromRGB(71, 85, 105),
            TextMuted = Color3.fromRGB(148, 163, 184),
            Success = Color3.fromRGB(34, 197, 94),
            Danger = Color3.fromRGB(239, 68, 68),
            Warning = Color3.fromRGB(251, 146, 60),
            Border = Color3.fromRGB(226, 232, 240),
            BorderLight = Color3.fromRGB(203, 213, 225),
            Accent = Color3.fromRGB(147, 51, 234),
        },
        Dark = {
            Background = Color3.fromRGB(10, 10, 15),
            Surface = Color3.fromRGB(20, 20, 28),
            Surface2 = Color3.fromRGB(28, 28, 36),
            Surface3 = Color3.fromRGB(36, 36, 46),
            Primary = Color3.fromRGB(99, 102, 241),
            PrimaryHover = Color3.fromRGB(129, 140, 255),
            PrimaryDim = Color3.fromRGB(79, 82, 220),
            Text = Color3.fromRGB(245, 245, 250),
            TextSecondary = Color3.fromRGB(170, 180, 190),
            TextMuted = Color3.fromRGB(130, 140, 150),
            Success = Color3.fromRGB(50, 215, 110),
            Danger = Color3.fromRGB(255, 80, 80),
            Warning = Color3.fromRGB(255, 160, 75),
            Border = Color3.fromRGB(45, 45, 60),
            BorderLight = Color3.fromRGB(55, 55, 75),
            Accent = Color3.fromRGB(160, 70, 255),
        },
    },
    Fonts = {
        Regular = Enum.Font.Gotham,
        Medium = Enum.Font.GothamMedium,
        Bold = Enum.Font.GothamBold,
    },
    Spacing = { xs = 4, sm = 8, md = 12, lg = 16, xl = 24 },
    Radius = { sm = 8, md = 12, lg = 16, xl = 24 },
    Animation = { Fast = 0.15, Medium = 0.25, Slow = 0.4 },
    Layout = {
        RowHeight = 48,
        RowSpacing = 12,
        EdgePadding = 20,
        MaxWidth = 580,
        MaxHeight = 440,
    },
}

--// Utility Functions
local function Tween(object, properties, duration, easingStyle, easingDirection)
    return TweenService:Create(
        object,
        TweenInfo.new(
            duration or Config.Animation.Medium,
            easingStyle or Enum.EasingStyle.Cubic,
            easingDirection or Enum.EasingDirection.Out
        ),
        properties
    )
end

local function Corner(parent, radius)
    local corner = Instance.new('UICorner')
    corner.CornerRadius = UDim.new(0, radius or Config.Radius.lg)
    corner.Parent = parent
    return corner
end

local function Stroke(parent, color, thickness)
    local stroke = Instance.new('UIStroke')
    stroke.Color = color or Color3.new(1, 1, 1)
    stroke.Thickness = thickness or 1
    stroke.Transparency = 0
    stroke.Parent = parent
    return stroke
end

--// Notification System
local notificationQueue = {}
local notificationGui = Instance.new('ScreenGui', CoreGui)
notificationGui.Name = 'MinimalGUI_Notifications'
notificationGui.ResetOnSpawn = false
notificationGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local function createNotification(message, notificationType)
    local colors = Config.Colors.Dark -- Notifications look best in dark theme
    local bgColor = colors.Surface
    local textColor = colors.Text
    local accentColor = colors.Primary
    local iconText = "💬"

    if notificationType == 'success' then
        accentColor = colors.Success
        iconText = "✔"
    elseif notificationType == 'danger' then
        accentColor = colors.Danger
        iconText = "✖"
    elseif notificationType == 'warning' then
        accentColor = colors.Warning
        iconText = "⚠"
    end

    local notification = Instance.new('Frame')
    notification.Size = UDim2.new(0, 320, 0, 64)
    notification.Position = UDim2.new(1, 50, 1, -80 - (#notificationQueue * 72))
    notification.BackgroundColor3 = bgColor
    notification.Parent = notificationGui
    Corner(notification, Config.Radius.md)
    Stroke(notification, colors.Border, 1)

    local accentBar = Instance.new('Frame')
    accentBar.Size = UDim2.new(0, 5, 1, 0)
    accentBar.BackgroundColor3 = accentColor
    accentBar.Parent = notification
    local accentCorner = Corner(accentBar, Config.Radius.md)
    accentCorner.CornerRadius = UDim.new(0, Config.Radius.md)

    local iconLabel = Instance.new('TextLabel')
    iconLabel.Size = UDim2.new(0, 40, 1, 0)
    iconLabel.Position = UDim2.new(0, 15, 0, 0)
    iconLabel.Text = iconText
    iconLabel.Font = Config.Fonts.Bold
    iconLabel.TextSize = 20
    iconLabel.TextColor3 = accentColor
    iconLabel.BackgroundTransparency = 1
    iconLabel.Parent = notification

    local textLabel = Instance.new('TextLabel')
    textLabel.Size = UDim2.new(1, -65, 1, 0)
    textLabel.Position = UDim2.new(0, 55, 0, 0)
    textLabel.Text = message
    textLabel.Font = Config.Fonts.Medium
    textLabel.TextSize = 14
    textLabel.TextColor3 = textColor
    textLabel.TextWrapped = true
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Center
    textLabel.BackgroundTransparency = 1
    textLabel.Parent = notification

    local progressFill = Instance.new('Frame')
    progressFill.Size = UDim2.new(1, 0, 0, 2)
    progressFill.Position = UDim2.new(0, 0, 1, 0)
    progressFill.BackgroundColor3 = accentColor
    progressFill.BorderSizePixel = 0
    progressFill.Parent = notification
    Corner(progressFill, 1)

    -- Entrance animation
    Tween(notification, { Position = UDim2.new(1, -340, 1, -80 - (#notificationQueue * 72)) }, Config.Animation.Slow, Enum.EasingStyle.Back):Play()
    table.insert(notificationQueue, notification)

    -- Auto dismiss
    local progressTween = Tween(progressFill, { Size = UDim2.new(0, 0, 0, 2) }, 4.5, Enum.EasingStyle.Linear)
    progressTween:Play()

    local function dismiss()
        if not table.find(notificationQueue, notification) then return end
        
        -- Remove from queue
        for i, v in ipairs(notificationQueue) do
            if v == notification then
                table.remove(notificationQueue, i)
                break
            end
        end

        -- Animate out
        Tween(notification, { Position = UDim2.new(1, 50, 1, -80 - (#notificationQueue * 72)) }, Config.Animation.Medium, Enum.EasingStyle.Back, Enum.EasingDirection.In):Play()
        task.delay(Config.Animation.Medium, function()
            notification:Destroy()
        end)
        
        -- Reposition other notifications
        for i, otherNotif in ipairs(notificationQueue) do
            Tween(otherNotif, { Position = UDim2.new(1, -340, 1, -80 - ((i - 1) * 72)) }, Config.Animation.Medium):Play()
        end
    end

    progressTween.Completed:Connect(dismiss)
    notification.InputBegan:Connect(dismiss)
end


--// Main Window
function MinimalGUI:CreateWindow(title, size)
    title = title or 'MinimalGUI'
    size = size or UDim2.new(0, Config.Layout.MaxWidth, 0, Config.Layout.MaxHeight)

    local window = {
        Pages = {},
        CurrentPage = nil,
        _connections = {},
        _isDarkTheme = true,
        _activeTab = nil
    }
    self.CurrentWindow = window

    function window:getColors()
        return self._isDarkTheme and Config.Colors.Dark or Config.Colors.Light
    end

    function window:Notify(message, notificationType)
        task.spawn(createNotification, message, notificationType or 'info')
    end

    local gui = Instance.new('ScreenGui')
    gui.Name = 'MinimalGUI'
    gui.Parent = CoreGui
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local blur = Instance.new("BlurEffect")
    blur.Size = 0
    blur.Parent = game:GetService("Lighting")

    local main = Instance.new('Frame')
    main.Size = UDim2.new(0, 0, 0, 0)
    main.Position = UDim2.new(0.5, 0, 0.5, 0)
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.BackgroundTransparency = 0.2
    main.Parent = gui
    Corner(main, Config.Radius.xl)
    local mainStroke = Stroke(main, window:getColors().Border, 1)

    local header = Instance.new('Frame')
    header.Size = UDim2.new(1, 0, 0, 56)
    header.BackgroundTransparency = 1
    header.Parent = main
    
    local titleText = Instance.new('TextLabel')
    titleText.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 0)
    titleText.Size = UDim2.new(0, 200, 1, 0)
    titleText.Font = Config.Fonts.Bold
    titleText.TextSize = 18
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = header
    
    local themeBtn = Instance.new('TextButton')
    themeBtn.Size = UDim2.new(0, 32, 0, 32)
    themeBtn.Position = UDim2.new(1, -Config.Layout.EdgePadding - 40, 0.5, -16)
    themeBtn.Text = '🌙'
    themeBtn.Font = Config.Fonts.Medium
    themeBtn.TextSize = 16
    themeBtn.Parent = header
    Corner(themeBtn, Config.Radius.md)

    local closeBtn = Instance.new('TextButton')
    closeBtn.Size = UDim2.new(0, 32, 0, 32)
    closeBtn.Position = UDim2.new(1, -Config.Layout.EdgePadding, 0.5, -16)
    closeBtn.Text = '✕'
    closeBtn.Font = Config.Fonts.Bold
    closeBtn.TextSize = 16
    closeBtn.Parent = header
    Corner(closeBtn, Config.Radius.md)

    local tabContainer = Instance.new('Frame')
    tabContainer.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 0, 36)
    tabContainer.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 56)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = main
    local tabLayout = Instance.new('UIListLayout', tabContainer)
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0, 8)

    local content = Instance.new('Frame')
    content.Size = UDim2.new(1, -Config.Layout.EdgePadding * 2, 1, -112)
    content.Position = UDim2.new(0, Config.Layout.EdgePadding, 0, 100)
    content.BackgroundTransparency = 1
    content.Parent = main
    
    local function updateTheme()
        local colors = window:getColors()
        Tween(main, { BackgroundColor3 = colors.Background }, Config.Animation.Fast):Play()
        mainStroke.Color = colors.Border
        titleText.TextColor3 = colors.Text
        
        themeBtn.BackgroundColor3 = colors.Surface2
        themeBtn.TextColor3 = colors.TextMuted
        closeBtn.BackgroundColor3 = colors.Surface2
        closeBtn.TextColor3 = colors.TextMuted
        
        for _, page in pairs(window.Pages) do
            if window._activeTab == page._button then
                page._button.BackgroundColor3 = colors.Primary
                page._button.TextColor3 = Color3.new(1,1,1)
            else
                page._button.BackgroundColor3 = colors.Surface2
                page._button.TextColor3 = colors.TextSecondary
            end
        end
    end

    themeBtn.MouseButton1Click:Connect(function()
        window._isDarkTheme = not window._isDarkTheme
        themeBtn.Text = window._isDarkTheme and '🌙' or '☀️'
        updateTheme()
    end)
    
    closeBtn.MouseEnter:Connect(function() Tween(closeBtn, { BackgroundColor3 = window:getColors().Danger, TextColor3 = Color3.new(1,1,1) }, Config.Animation.Fast):Play() end)
    closeBtn.MouseLeave:Connect(function() Tween(closeBtn, { BackgroundColor3 = window:getColors().Surface2, TextColor3 = window:getColors().TextMuted }, Config.Animation.Fast):Play() end)
    closeBtn.MouseButton1Click:Connect(function()
        Tween(blur, { Size = 0 }, Config.Animation.Medium):Play()
        local closeTween = Tween(main, { Size = UDim2.fromOffset(0,0), Rotation = -15 }, Config.Animation.Medium, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        closeTween:Play()
        closeTween.Completed:Connect(function()
            gui:Destroy()
        end)
    end)

    local dragging, dragStart
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position - main.AbsolutePosition
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            main.Position = UDim2.fromOffset(input.Position.X - dragStart.X, input.Position.Y - dragStart.Y)
        end
    end)

    function window:CreatePage(name)
        local page = { Name = name, Elements = {}, _frame = nil, _button = nil }

        local tabBtn = Instance.new('TextButton')
        tabBtn.AutomaticSize = Enum.AutomaticSize.X
        tabBtn.Size = UDim2.new(0, 0, 1, 0)
        tabBtn.Text = "  " .. name .. "  "
        tabBtn.Font = Config.Fonts.Medium
        tabBtn.TextSize = 14
        tabBtn.Parent = tabContainer
        Corner(tabBtn, Config.Radius.md)

        local pageFrame = Instance.new('ScrollingFrame')
        pageFrame.Size = UDim2.new(1, 0, 1, 0)
        pageFrame.BackgroundTransparency = 1
        pageFrame.BorderSizePixel = 0
        pageFrame.ScrollBarThickness = 6
        pageFrame.Visible = false
        pageFrame.Parent = content
        local pageLayout = Instance.new('UIListLayout', pageFrame)
        pageLayout.Padding = UDim.new(0, Config.Layout.RowSpacing)
        pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
        
        pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            pageFrame.CanvasSize = UDim2.fromOffset(0, pageLayout.AbsoluteContentSize.Y)
        end)

        tabBtn.MouseButton1Click:Connect(function()
            if window._activeTab == tabBtn then return end
            
            if window._activeTab then
                local oldPage = window.Pages[window._activeTab.Name]
                oldPage._frame.Visible = false
                Tween(window._activeTab, {
                    BackgroundColor3 = window:getColors().Surface2,
                    TextColor3 = window:getColors().TextSecondary
                }, Config.Animation.Medium):Play()
            end
            
            pageFrame.Visible = true
            Tween(tabBtn, {
                BackgroundColor3 = window:getColors().Primary,
                TextColor3 = Color3.new(1,1,1)
            }, Config.Animation.Medium):Play()
            
            window.CurrentPage = page
            window._activeTab = tabBtn
        end)

        tabBtn.MouseEnter:Connect(function() if window._activeTab ~= tabBtn then Tween(tabBtn, { BackgroundColor3 = window:getColors().Surface3 }, Config.Animation.Fast):Play() end end)
        tabBtn.MouseLeave:Connect(function() if window._activeTab ~= tabBtn then Tween(tabBtn, { BackgroundColor3 = window:getColors().Surface2 }, Config.Animation.Fast):Play() end end)
        
        page._button = tabBtn
        page._frame = pageFrame
        window.Pages[name] = page

        if not window.CurrentPage then
            task.defer(function() tabBtn.MouseButton1Click:Fire() end)
        end
        
        updateTheme() -- Apply theme to new elements
        return page
    end
    
    -- Final setup and entrance animation
    updateTheme()
    Tween(main, { Size = size, Rotation = 0 }, Config.Animation.Slow, Enum.EasingStyle.Back):Play()
    Tween(blur, { Size = 16 }, Config.Animation.Medium):Play()

    function window:Destroy()
        Tween(blur, { Size = 0 }, Config.Animation.Medium):Play()
        gui:Destroy()
    end
    
    return window
end

function MinimalGUI:DestroyAll()
    if self.CurrentWindow and self.CurrentWindow.Destroy then
        pcall(function() self.CurrentWindow:Destroy() end)
    end
    if notificationGui then
        pcall(function() notificationGui:Destroy() end)
    end
    notificationQueue = {}
    self.CurrentWindow = nil
end

if getgenv then
    getgenv().MinimalGUI_Instance = MinimalGUI
end

return MinimalGUI
```
